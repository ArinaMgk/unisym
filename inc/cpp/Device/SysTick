// ASCII CPP-ISO11 TAB4 CRLF
// Docutitle: (Device) SysTick
// Codifiers: @dosconio: 20240511
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_TOKI_SysTick_X
#define _INC_DEVICE_TOKI_SysTick_X

#include "../unisym"

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)

#define ADDR_SysTick_Map 0xE000E010

#undef SysTick

namespace uni {
	typedef struct SysTick_Map
	{
		uint32 CTRL;  // 0x000 (R/W)  SysTick Control and Status Register
		uint32 LOAD;  // 0x004 (R/W)  SysTick Reload Value Register
		uint32 VAL;   // 0x008 (R/W)  SysTick Current Value Register
		uint32 CALIB; // 0x00C (R/ )  SysTick Calibration Register
	} SysTick_Map;
}
#endif

extern "C" void SysDelay(stduint unit);

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x) || defined(_MPU_STM32MP13)

extern stduint SysTickHz;

namespace uni {
	#undef SysTick
	class SysTick {
	public:
		static bool enClock(uint32 Hz);
		inline static void Delay(stduint unit) { SysDelay(unit); }
	#if defined(_MCU_STM32F4x)
		static SysTick_Map& ref() { return *(SysTick_Map*)ADDR_SysTick_Map; }
	#elif defined(_MPU_STM32MP13)
		// AKA HAL_GetTick
		static uint64 getTick();
		//
		static uint64 getTickPhysical();
	#endif
	};
}
#endif

#endif
