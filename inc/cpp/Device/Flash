// ASCII C/C++ TAB4 CRLF
// Docutitle: (Device) Flash
// Codifiers: @dosconio: ~ 20240718
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_Flash
#define _INC_DEVICE_Flash

#include "../unisym"
#include "../reference"

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)

#endif// _MCU_STM32F1x || _MCU_STM32F4x

#ifdef _MCU_STM32F1x



#elif defined(_MCU_STM32F4x)

#define _Flash_ADDR 0x40023C00 //~ 0x40023CFF
#define _Flash_ACR_POSI_PRFTEN 8

namespace uni {

	namespace FlashReg {
		typedef enum {
			ACR = 0, KEYR, OPTKEYR, SR,
			CR, OPTCR
		} FlashReg;
	}
	
	class Flash_t {
	public:
		Reference operator[](FlashReg::FlashReg idx) {
			return Reference(_Flash_ADDR + (_IMM(idx) << 2));
		}

	};
	extern Flash_t Flash;// yo RCC!
}

#elif defined(_MCU_STM32H7x)

#define _Flash_ADDR (D1_AHB1PERIPH_BASE + 0x2000)
namespace uni {

	namespace FlashReg {
		typedef enum {
		ACR,                // FLASH access control register
		KEYR1,              // Flash Key Register for bank1
		OPTKEYR,            // Flash Option Key Register
		CR1,                // Flash Control Register for bank1
		SR1,                // Flash Status Register for bank1
		CCR1,               // Flash Control Register for bank1
		OPTCR,              // Flash Option Control Register
		OPTSR_CUR,          // Flash Option Status Current Register
		OPTSR_PRG,          // Flash Option Status Current Register
		OPTCCR,             // Flash Option Clear Control Register
		PRAR_CUR1,          // Flash Current Protection Address Register for bank1
		PRAR_PRG1,          // Flash Protection Address to Program Register for bank1
		SCAR_CUR1,          // Flash Current Secure Address Register for bank1
		SCAR_PRG1,          // Flash Secure Address Register for bank1
		WPSN_CUR1,          // Flash Current Write Protection Register on bank1
		WPSN_PRG1,          // Flash Write Protection to Program Register on bank1
		BOOT_CUR,           // Flash Current Boot Address for Pelican Core Register
		BOOT_PRG,           // Flash Boot Address to Program for Pelican Core Register
		CRCCR1 = 0x50/4,    // Flash CRC Control register For Bank1 Register
		CRCSADD1,           // Flash CRC Start Address Register for Bank1
		CRCEADD1,           // Flash CRC End Address Register for Bank1
		CRCDATA,            // Flash CRC Data Register for Bank1
		ECC_FA1,            // Flash ECC Fail Address For Bank1 Register
		KEYR2 = 0x104/4,    // Flash Key Register for bank2
		CR2 = 0x10C/4,      // Flash Control Register for bank2
		SR2,                // Flash Status Register for bank2
		CCR2,               // Flash Status Register for bank2
		PRAR_CUR2 = 0x128/4,// Flash Current Protection Address Register for bank2
		PRAR_PRG2,          // Flash Protection Address to Program Register for bank2
		SCAR_CUR2,          // Flash Current Secure Address Register for bank2
		SCAR_PRG2,          // Flash Secure Address Register for bank2
		WPSN_CUR2,          // Flash Current Write Protection Register on bank2
		WPSN_PRG2,          // Flash Write Protection to Program Register on bank2
		CRCCR2 = 0x150/4,   // Flash CRC Control register For Bank2 Register
		CRCSADD2,           // Flash CRC Start Address Register for Bank2
		CRCEADD2,           // Flash CRC End Address Register for Bank2
		CRCDATA2,           // Flash CRC Data Register for Bank2
		ECC_FA2,            // Flash ECC Fail Address For Bank2 Register
		} FlashReg;
	}
	
	class Flash_t {
	public:
		Reference operator[](FlashReg::FlashReg idx);

	};
	extern Flash_t Flash;// yo RCC!
}

#endif
#endif


