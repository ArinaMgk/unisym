// UTF-8 CPP-ISO11 TAB4 CRLF
// Docutitle: (Device) Digital-Analog Converter
// Codifiers: @dosconio: 20240715~;
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
// Dependens: GPIO DMA
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_Device_DAC
#define _INC_Device_DAC

#include "../unisym"
#include "../reference"
#include "../trait/XstreamTrait.hpp"
#include "../../c/binary.h"
#include "GPIO"
#include "DMA"

/*
[F4]
- 0x0000_0001 DAC Channel 1
- 0x0000_0002 DAC Channel 2

*/

namespace uni {

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)
	#undef DAC
	// 2 16b-word for the 2 channels
	#define _DAC_CR_POS_ENx    0
	#define _DAC_CR_POS_BOFFx  1
	#define _DAC_CR_POS_TENx   2
	#define _DAC_CR_POS_TSELx  3 // 3b
	#define _DAC_CR_POS_WAVEx  6
	#define _DAC_CR_POS_MAMPx  8 // 4b
	#define _DAC_CR_POS_DMAENx 12

	#define _DAC_CR_VAL_TEN1    0x00000004
	#define _DAC_CR_VAL_TSEL1_0 0x00000008 
	#define _DAC_CR_VAL_TSEL1_1 0x00000010 
	#define _DAC_CR_VAL_TSEL1_2 0x00000020 
	#define _DAC_CR_VAL_TSEL1   0x00000038

	//
	namespace DACReg {
		typedef enum {
			CR = 0, SWTRIGR, DHR12R1, DHR12L1, DHR8R1, DHR12R2, DHR12L2, DHR8R2, DHR12RD, DHR12LD, DHR8RD, DOR1, DOR2
			#if defined(_MCU_STM32F4x)
			, SR
			#endif
		} DACRegType;
	}
#endif


#ifdef _MCU_STM32F1x

	
	namespace DACTrigger {
		typedef enum {
			T6 = (uint32)_DAC_CR_VAL_TEN1,
			T7 = _DAC_CR_VAL_TEN1 | _DAC_CR_VAL_TSEL1_1,
			T2 = _DAC_CR_VAL_TEN1 | _DAC_CR_VAL_TSEL1_2,
			T4 = _DAC_CR_VAL_TEN1 | _DAC_CR_VAL_TSEL1_2 | _DAC_CR_VAL_TSEL1_0,
			EXT_IT9 = _DAC_CR_VAL_TEN1 | _DAC_CR_VAL_TSEL1_2 | _DAC_CR_VAL_TSEL1_1,
			SOFTWARE = _DAC_CR_VAL_TEN1 | _DAC_CR_VAL_TSEL1
		} DACTrigger;
	}
#endif
	

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)

	#define DAC_getStdvol(i) ((float)i*2.5/0x1000)
	class DACChan;
	class DAC_t
		#if 0
		: public RuptTrait
		#endif
	{
	protected:
		stduint baseaddr;
		//{MEANINGLESS} byte DAC_ID;
		pureptr_t bind;
		void setOutput(byte channel, uint16 val);
	public:
		DAC_t(stduint baseaddr) : baseaddr(baseaddr), bind(0){ }
		stduint getBaseAddr() { return baseaddr; }
		//{MEANINGLESS} byte getID() { return DAC_ID; }

		Reference operator[](DACReg::DACRegType idx) {
			return Reference(baseaddr + (((stduint)idx) << 2));
		}
		
		bool enClock(bool ena = true);

		void enAble(byte channel, bool ena = true) {
			if (channel != 1 && channel != 2) return;
			self[DACReg::CR].setof(_DAC_CR_POS_ENx + (channel - 1) * 16 , ena);
		}

		byte getChannel(const GPIO_Pin& pin) const {
			if (&pin == &GPIOA[4])
				return 1;
			else if (&pin == &GPIOA[5])
				return 2;
			return 0;
		}
		GPIO_Pin* getPin(byte channel) {
			if (channel == 1)
				return &GPIOA[4];
			else if (channel == 2)
				return &GPIOA[5];
			return 0;
		}
		const DACChan& operator[](const GPIO_Pin& pin) const {
		    return *(const DACChan*)_IMM(getChannel(pin));
		}

		void setOutput(GPIO_Pin& pin, uint16 val) {
			byte channel = getChannel(pin);
			if (!channel) return;
			setOutput(channel, val);
		}

		#ifdef _MCU_STM32F1x //{TEMP}
		bool enDMA(GPIO_Pin& pin, DACTrigger::DACTrigger trigger, bool buffer_enable, pureptr_t data, uint32_t leng, uint32_t align = 0);
		#elif defined(_MCU_STM32F4x)
		bool enAble(GPIO_Pin& pin);
		#endif
		
	};

	extern DAC_t DAC;

	class DACChan
		#if 0
		: public RuptTrait, public OstreamTrait
		#endif
	{
	public:
		DAC_t& getParent() const { return DAC; }
		byte getID() const { return _IMM(this) % (1 + 2); }
	};


#endif
}

#endif
