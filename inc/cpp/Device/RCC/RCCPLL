// ASCII CPP TAB4 CRLF
// Docutitle: Phase-Locked Loop in Reset and Clock Control
// Datecheck: 20240419 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_PLL_X
#define _INC_DEVICE_RCC_PLL_X

#include "../../reference"
#include "RCCAddress"

/* MEMMAP
** this == 0x1 0x2 0x3 0x4, for PLL1 PLL2 PLL3 PLL4
*/

namespace uni {
#ifdef _MCU_STM32F1x

	namespace PLLSource {
		enum RCCPLLClockSource {
			HSI_div2 = 0x00000000, // 0b0000
			HSE      = 0x00010000, // 0b0100 RCC_CFGR_PLLSRC
			Unknown,
			Mask     = HSE
		};
	}
	class RCCPLL {
	private:
		void setSource(PLLSource::RCCPLLClockSource source) {
			Reference Cfgreg(_RCC_CFGR);
			Cfgreg &= ~(uint32)PLLSource::Mask;
			Cfgreg |= (uint32)source;
		}
		void enAble(bool ena = true) {
			Reference Conreg(_RCC_CR);
			ena ? Conreg.setof(_RCC_CR_POSI_PLLEnable) : Conreg.rstof(_RCC_CR_POSI_PLLEnable);
			while (Conreg.bitof(_RCC_CR_POSI_PLLReady) ^ ena); // wait for PLL locked
		}
	public:
		bool setMode(bool state_on = true, PLLSource::RCCPLLClockSource source = PLLSource::HSE, uint32 mulfactor = 9, bool HSE_div2 = false) {
			//{TOCHK} Can this be used twice or more ?
			if (RCCSystemClock::CurrentSource() == SysclkSource::PLL) {
				return false;//{TEMP}
			}
			else {
				Reference Conreg(_RCC_CR);
				Reference Cfgreg(_RCC_CFGR);
				if (state_on) {
					//{TODO} use Tick to process
					enAble(false);
					//{TODO} HSE call this to set divr
					// - prediv can be written only when the PLL is disabled.
					// - {TEMP} div-one
					if (source == PLLSource::HSE) {
						//{TODO} RCC_CFGR2_PREDIV1SRC
						Cfgreg.setof(_RCC_CFGR_POSI_PLL_XTPRE, HSE_div2);
						// Configure the main PLL clock source
						setSource(source);
						// Configure the main PLL multiplication factors
						if (mulfactor <= 9) {
							mulfactor -= 2;
							Cfgreg &= ~(uint32)(0xF << _RCC_CR_POSI_PLLMUL_LSB);
							Cfgreg |= (uint32)(mulfactor << _RCC_CR_POSI_PLLMUL_LSB);
						}
						// Enable the main PLL
						enAble();
					}
				}
				else {
					enAble(false);
				}
				return true;
			}
		}

		// 
		static bool isReady() {
			Reference Conreg(_RCC_CR);
			return Conreg.bitof(_RCC_CR_POSI_PLLReady);
		}

		static PLLSource::RCCPLLClockSource CurrentSource() {
			Reference _RCC_ConfigRegister(_RCC_CFGR);
			return (PLLSource::RCCPLLClockSource)(_RCC_ConfigRegister & _RCC_CFGR_MASK_PLLSource);
		}
	};


#elif defined(_MCU_STM32F4x)


	namespace PLLSource {
		enum PLLSource {
			HSI = 0x00000000, //aka  RCC_PLLCFGR_PLLSRC_HSI
			HSE = 0x00400000, //aka RCC_PLLCFGR_PLLSRC_HSE RCC_PLLCFGR_PLLSRC_HSE
			Mask = HSE
		};
	}
	class RCCPLL {
	private:
		void enAble(bool ena = true);
	public:
		bool setMode();
		static bool isReady();
	};

#elif defined(_MPU_STM32MP13)
	enum class PLLMode {
		Integer = 0, Fractional = 0x1, SpreadSpectrum = 0x2
	};// pos 0 len 2
	namespace PLL1Source {
		enum PLL1SourceType {
			HSI = 0, HSE = 0x1, OFF
		};// pos 0 len 2
	}
	#define PLL2Source         PLL1Source
	#define RCCPLL2ClockSource RCCPLL1ClockSource
	namespace PLL3Source {
		enum PLL3SourceType {
			HSI = 0, HSE = 0x1, CSI = 0x2, OFF = 0x3
		};// pos 0 len 2
	}
	#define PLL4Source         PLL3Source
	#define RCCPLL4ClockSource RCCPLL3ClockSource

	// [omit] PLLState(ON), PLLSource(HAD), PLLMODE(HAD) PLLRGE(HAD34)
	// [less] MOD_PER, RPDFN_DIS, TPDFN_DIS, SSCG_MODE, INC_STEP
	struct PLLPara_t{
		byte m;// 1 .. 64
		word n;// IntPLL1600(25.100), IntPLL800(25..200), FractionalModes(4..512)
		byte p, q, r;// 1 .. 128
		word frac;// 0 .. 8191
	};// aka RCC_PLLInitTypeDef
	// assure in the order
	#define setModePLL12(mod,src,...) setMode((mod),(src),(PLLPara_t){__VA_ARGS__})
	#define setModePLL34(mod,src,ifr,...) setMode((mod),(src),(ifr),(PLLPara_t){__VA_ARGS__})

	
	class RCCPLL {
	private:
		// AKA{__HAL_RCC_PLL1_CONFIG}
		void setPara(PLLPara_t para) const;
		//
		bool setSource(stduint src) const;
		//
		void ConfigFracv(stduint frac) const;
		//
		float32 getVCO() const;
	public:
		//
		void enAble(bool ena = true) const;
		// AKA {__IS_PLLx_IN_USE}
		bool isUsed() const;
		//
		stduint getID() const { return _IMM(this) & 0xF; } // 1 ~ 4
		//
		bool isReady() const;
		// set state ON
		// AKA {RCC_PLL1_Config, RCCEx_PLLx_Config}
		// if_range: 0 for 4~8MHz, 1 for 8~16MHz
		bool setMode(PLLMode mod, PLL1Source::PLL1SourceType src, PLLPara_t para) const;
		bool setMode(PLLMode mod, PLL3Source::PLL3SourceType src, bool if_range, PLLPara_t para) const;
		// Reset or set state OFF
		bool canMode(bool reset = true) const;
		
		// AKA{__HAL_RCC_GET_PLLx_SOURCE}
		stduint CurrentSource() const;
		
		// ---- Below are parts from AKA HAL_RCC_GetPLL1ClockFreq
		//{} Can these use PLLPara_t getParameter() const ?
		stduint getFrequencyP() const;// AKA GetPLL1PClockFreq in system_....c
		stduint getFrequencyQ() const;//TODO
		stduint getFrequencyR() const;//TODO
	};

#endif
}
#endif
