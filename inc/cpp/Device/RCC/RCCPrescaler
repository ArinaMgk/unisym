// ASCII CPP TAB4 CRLF
// Docutitle: Reset and Clock Control
// Datecheck: 20240416 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_Prescaler_X
#define _INC_DEVICE_RCC_Prescaler_X

#include "../../reference"

#ifdef _MCU_STM32F103VE

namespace uni {
	class RCCPrescaler {
		
	};

	class RCCAHB : public RCCPrescaler { // HCLK
	public:
		// available [0~8]. For example, if divexpo is 1, the divr 2^1 will be applied.
		bool setMode(uint8 divexpo = 0, bool usingPCLK1 = true, bool usingPCLK2 = true);
	};

	class RCCAPB : public RCCPrescaler { // PCLK 1/2 
	protected:
		stduint PCLK_ID;
	public:
		RCCAPB(stduint PCLK_ID) : PCLK_ID((PCLK_ID - 1) & 1) {
			// PCLK_ID can only be 1 or 2
		}
		//
		bool setMode(uint8 divexpo) {
			Reference Cfgreg(_RCC_CFGR);
			if (divexpo >= 5) return false;
			uint32 bitposi = 8 + PCLK_ID * 3;
			if (divexpo) divexpo = (divexpo - 1) | 0x4;
			Cfgreg = (Cfgreg & ~(uint32)(0x7 << bitposi)) | (divexpo << bitposi);
			return true;
		}
	};



}


#endif
#endif
