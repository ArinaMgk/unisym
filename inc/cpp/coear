// ASCII C++ TAB4 CRLF
// Attribute: <ArnCovenant> <Env> <bin^%> <CPU()> [Allocation]
// LastCheck: <date>
// AllAuthor: ...
// ModuTitle: ...
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_X_COEAR
#define _INC_X_COEAR
#include "cinc"
#include "../c/alice.h"
#include "../c/coear.h"
#include "cinc"
#include "floating"
#include <math.h>
#include "iostream"

//{TODO} independent from `erro` `_MALCOUNT` `_MALLIMIT` .... [These should be of `malc` and `memf`.]
//{TODO} do not use std:: and rely on it.

namespace uni {
	class Coe /*: public coe*/ {
	public:
		Coe(const char* coff, const char* divr, const char* expo = "+0", stduint dimension = 0);
		Coe(double num);
		Coe(const char* local_str);
		Coe(const Coe& c);
		Coe(coe* c);
		~Coe();
		void Srs(const Coe& c);
		bool isnan();
		bool isinf();
		double GetReal() const;

		static Coe pi();
		static Coe e();

		std::string ToString(int opt = 0) const;
		double ToDouble() const;

		friend Coe& operator++ (Coe& num);
		Coe operator++ (int);
		friend Coe& operator-- (Coe& num);
		Coe operator-- (int);

		Coe operator+ () const;
		Coe operator+ (Coe& s1);
		friend Coe operator+ (const Coe& s0, const double s1);
		friend Coe operator+ (const double s1, const Coe& s0);
		Coe& operator+=(const Coe& src);

		Coe operator- ();
		Coe operator- (Coe& s1);
		friend Coe operator- (const Coe& s0, const double s1);
		friend Coe operator- (const double s1, const Coe& s0);
		Coe& operator-=(const Coe& src);

		Coe operator* (Coe& s1);
		friend Coe operator* (const Coe& s0, const double s1);
		friend Coe operator* (const double s1, const Coe& s0);
		Coe& operator*=(const Coe& src);

		Coe operator/ (Coe& s1);
		friend Coe operator/ (const Coe& s0, const double s1);
		friend Coe operator/ (const double s1, const Coe& s0);
		Coe& operator/=(const Coe& src);

		friend std::ostream& operator<< (std::ostream& out, const Coe& c);
		friend Coe operator^ (const Coe& b, const Coe& c);
		Coe& operator^=(const Coe& src);

		//{TEMP} no using: Coe res(CoeCpy(this->co)); CoeSin(res.co);
		Coe Sin() { return Coe(sin(ToDouble())); }
		Coe Cos() { return Coe(cos(ToDouble())); }
		Coe Tan() { return Coe(tan(ToDouble())); }
		Coe ASin() { return Coe(asin(ToDouble())); }
		Coe ACos() { return Coe(acos(ToDouble())); }
		Coe ATan() { return Coe(atan(ToDouble())); }
		Coe Sinh() { return Coe(sinh(ToDouble())); }
		Coe Cosh() { return Coe(cosh(ToDouble())); }
		Coe Tanh() { return Coe(tanh(ToDouble())); }
		Coe ASinh() { return Coe(asinh(ToDouble())); }
		Coe ACosh() { return Coe(acosh(ToDouble())); }
		Coe ATanh() { return Coe(atanh(ToDouble())); }
	protected:
		coe* co;
	};
	
	extern const Coe coe_pi;
	extern const Coe coe_e;

}

#endif // !_INC_X_FLOATING


