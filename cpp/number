// ASCII
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/
// C++ Headfile NUMAR yo COTLAB yo RFR04 by D.S.C.N.

#ifndef ModComplexternArithCpp
#define ModComplexternArithCpp
#ifndef ModComplexternArith
extern "C"
{
	#include <stddef.h>
	typedef struct Complextern
	{
		void* a; void* b; void* c; size_t d;
		void* e; void* f; void* g; size_t h;
	} Scalar, scalar;
}
#endif

typedef class Number
{
private:
	;
public:
	scalar content;
	Number(int a);
	Number(ptrdiff_t a);
	Number(double a);
	Number(double a, double b);
	Number(const Number& p);
	Number(const scalar* p): content(*p) { };
	// just make these, the more may appear in the future
	~Number();
	std::string RealToString();
	std::string ToString(int opt = 0);
	// opt
	friend Number& operator++ (Number& num);
	Number operator++ (int);
	friend Number& operator-- (Number& num);
	Number operator-- (int);
	
	Number operator+ (Number& s1);
	friend Number operator+ (const Number& s0, const double s1);
	friend Number operator+ (const double s1, const Number& s0);
	Number operator- (Number& s1);
	friend Number operator- (const Number& s0, const double s1);
	friend Number operator- (const double s1, const Number& s0);
	Number operator* (Number& s1);
	friend Number operator* (const Number& s0, const double s1);
	friend Number operator* (const double s1, const Number& s0);
	Number operator/ (Number& s1);
	friend Number operator/ (const Number& s0, const double s1);
	friend Number operator/ (const double s1, const Number& s0);
	//CrtProblem: the result of Number*2 is error:
	/*
		1.0`2.0++ == +1.099999999999998 +2.099999999999996i
		--2.2 == +1.299999999999996
		num ==+2.099999999999998 +2.099999999999996i
		num2 ==+1.299999999999996
		num2*2 ==+2.729999999999986400000000000016
		1+num2*2/1+3 ==+6.681818181818167
		Sayounara! - Erro demonstration.
		Sayounara~0
	*/

	// const scalar* content() const { return (const scalar*)&(this->content); }
} number;

#endif

