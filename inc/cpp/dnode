// ASCII C++ TAB4 CRLF
// Attribute: <ArnCovenant> <Env> <bin^%> <CPU()> [Allocation]
// LastCheck: 
// AllAuthor: @dosconio
// ModuTitle: D-D- Node for C++
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_X_DNODE
#define _INC_X_DNODE

#ifndef _INC_CPP
#define _INC_CPP
#endif

#include "cinc"
#include "../c/stdinc.h"
#include "../c/dnode.h"
#include "cinc"

// Exist : for offs
// Match : for offs and type

namespace uni {
	class DnodeChain {
	public:
		DnodeChain(bool need_free = false);
		~DnodeChain();
		void Append(void* addr, stduint typ);// do not check whether there are same items!
		inline void AppendIfnotMatch(void* addr, stduint typ) {
			if (!Match(addr, typ)) Append(addr, typ);
		}
		// Create if not exist
		inline void Reset(void* addr, stduint typ) {
			Dnode* nod = Index(addr);
			if (nod) nod->type = typ;
			else Append(addr, typ);
		}
		// Index First One
		Dnode* Index(void* content);
		stduint Count() { return node_count; }
		Dnode* Root() { return root_node; }
		Dnode* Last() { return last_node; }
		void Remove(const stduint iden);
		Dnode* Remove(Dnode* content, bool systematic = true);
		Dnode* Reverse() { // {TOIN dnode.cpp}{unchecked}
			Dnode* crt = root_node;
			Dnode* nex = 0;
			if (crt) do {
				nex = crt->next;
				xchgptr(crt->left, crt->next);
			} while (crt = nex);
			xchgptr(root_node, last_node);
			return root_node;
		}
		void Clear() {
		}
		void SetFreeContent(bool need_free);
		void Onfree(void(*fn_free)(void*) = 0, bool need_free = true, bool pass_whole = true) {
			_node_freefunc = fn_free;
			need_free_content = need_free;
			free_pass_whole = pass_whole;
		}
		void Sort();
		void Onsort(bool sorted = true, bool little_to_big = true, int (*fn_compare)(const void*, const void*) = 0) {
            this->sorted = sorted;
            this->little_endian = little_to_big;
            this->_node_compare = fn_compare;
        }
		bool Match(void* off, stduint typ);
	protected:
		stduint node_count;
		Dnode* root_node;
		Dnode* last_node;
		bool need_free_content;
		//{TODO} below
		void(*_node_freefunc)(void*);
		bool sorted;
		bool little_endian;
		bool free_pass_whole;
		int (*_node_compare)(const void* addr0, const void* addr1);// return 0 for equal, 1 for greater, -1 for less
	};
}

#define dchainfree(next,pref) \
	if (pref need_free_content && !pref _node_freefunc) memf(next->offs);\
	if (pref need_free_content)\
		(pref _node_freefunc ? pref _node_freefunc : _memf)\
			((void*)(pref free_pass_whole ? next : next->offs));\
	else memf(next);\
	(pref node_count)--;

#endif
