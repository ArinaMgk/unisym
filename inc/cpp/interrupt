// ASCII CPP TAB4 CRLF
// Docutitle: Interrupt
// Codifiers: @dosconio: 20240420 ~ <Last-check> 
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_Interrupt_X
#define _INC_Interrupt_X

#include "unisym"
#include "Device/Interrupt/interrupt_tab.h"

namespace uni {
	class RuptTrait {
	public:
		virtual void setInterrupt(Handler_t _func) const = 0;
		virtual void setInterruptPriority(byte preempt, byte sub_priority) const = 0;
		virtual void enInterrupt(bool enable = true) const = 0;
		virtual ~RuptTrait() = default; // avoid [-Wnon-virtual-dtor]
		inline void enInterrupt(Handler_t _func) const {
			setInterrupt(_func);
			enInterrupt(true);
		}
	};
}

#define _COM_DEF_Interrupt_Interface() \
virtual void setInterrupt(Handler_t _func) const override;\
virtual void setInterruptPriority(byte preempt, byte sub_priority) const override;\
virtual void enInterrupt(bool enable = true) const override // you need add colon when using

#if defined(_MCCA) && _MCCA == 0x8632

namespace uni {
	class GateInterrupt : public gate_t {
	public:
		
	};
	class InterruptControl {
		// FLAP32
	protected:
		// 0x400 at least.
		GateInterrupt* IVT_SEL_ADDR;
	public:
		InterruptControl(stduint _ivt_sel_addr) : IVT_SEL_ADDR((GateInterrupt*)_ivt_sel_addr) {}
		GateInterrupt& operator[](uint8 index) {
			return IVT_SEL_ADDR[index];
		}
		void enAble(bool enable = true);

		void Reset(word SegCode);

		inline stduint operator&() {
			return (stduint)IVT_SEL_ADDR;
		}

	};
}

#elif defined(_MCU_STM32)
#include "Device/NVIC"
#include "Device/EXTI"
#include "Device/AFIO"

#else

// may for osdev?
#endif
#endif
