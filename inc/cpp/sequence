// ASCII C++-MSVC2010 TAB4 CRLF
// Attribute: [Allocation]
// LastCheck: 20240403
// AllAuthor: Xuecong(20211492316)
// ModuTitle: Sequence List

#ifndef _INC_SEQUENCE_X
#define _INC_SEQUENCE_X

#define _DEFAULT_LENGTH 100
#include <stddef.h>
#include <iostream>
#include <stdlib.h>
typedef size_t stduint;

namespace uni {

	template <typename type0> class Sequence {
	protected:
		type0* offs;// address of the sequence
		stduint limit;
		stduint count;
	public:
		type0 ERR;

		Sequence(stduint lim = _DEFAULT_LENGTH): limit(lim){
			count = 0;
			offs = new type0[limit];
		}
		Sequence(const Sequence& cop) {
			limit = cop.limit;
			count = cop.count;
			offs = new type0[limit];
			for(stduint i = 0; i < count; i++)
				offs[i] = cop.offs[i];
		}
		~Sequence(){
			delete[] offs;
			offs = nullptr;
			count = 0;
		}

		stduint getSize() { return limit; }
		stduint Count() { return count; }
		bool setSize(stduint lim) {
			if (lim < count) return false;
			type0* tmp = new type0[lim];
			for (stduint i = 0; i < count; i++)
				tmp[i] = offs[i];
			delete[] offs;
			limit = lim;
			offs = tmp;
			return true;
		}
		bool isFull() { return count >= limit; }
		bool isEmpty() { return !count; }

		bool Append(const type0& x) {
			return Insert(count, x);
		}

		// After, the new item will be at idx.
		// For example, if you have {A,B}, then insert(2,x)
		//     will result in: {A,B,x} 
		bool Insert(stduint idx, const type0& x) {
			bool success = true;
			if (count >= limit || idx > count)
				success = false;
			else {
				for (stduint i = 0; i < count - idx; i++)
					offs[count - i] = offs[count - i - 1];
				offs[idx] = x;
				count++;
			}
			return success;
		}

		// You may need destructure them before calling this.
		bool Remove(stduint idx, stduint times = 1) {
			bool success = true; 
			if (!times) return success;
			if (!count || idx + times > count) success = false;
			else {
				for (stduint i = 0; i < count - idx - times; i++)
					offs[idx + i] = offs[idx + times + i];
				count -= times;
			}
			return success;
		}

		Sequence& operator=(const Sequence& cop) {
			delete[] offs;
			limit = cop.limit;
			count = cop.count;
			offs = new type0[limit];
			for(stduint i = 0; i < count; i++)
				offs[i] = cop.offs[i];
			return *this;
		}

		inline std::ostream & operator>> (std::ostream &out) {
			std::cout << "\nThere are " << Count() << " items:" << std::endl;
			for (int i = 0; i < count; i++)
				std::cout << "\titem " << i << " : " << offs[i] << std::endl;
			return out;
		}

		inline bool operator<< (const type0& apd) {
			return this->Append(apd);
		}

		inline type0& operator[] (unsigned idx) { 
			return idx < count ? offs[idx] : ERR; //offs[count - 1];//{TEMP} 
		}

	};
	
}

#endif
