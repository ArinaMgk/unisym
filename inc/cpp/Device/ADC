// UTF-8 CPP-ISO11 TAB4 CRLF
// Docutitle: (Device) Analog-Digital Converter
// Codifiers: @dosconio: 20240709~;
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
// Dependens: GPIO and other ADC Channnels
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_Device_ADC
#define _INC_Device_ADC

#include "../unisym"
#include "../reference"
#include "../../c/binary.h"
#include "GPIO"
#include "DMA"

namespace uni {
#if 0

#elif defined(_MCU_STM32F1x)
	#undef ADC
	#undef ADC1
	#undef ADC2
	#undef ADC3

	_TODO // into an enum
	#define _ADC_SR_POS_EOC      1
	#define _ADC_SR_POS_STRT     4
	
	#define _ADC_CR1_POS_EOCIE   5
	#define _ADC_CR1_POS_SCAN    8
	#define _ADC_CR1_POS_DISCEN  11
	#define _ADC_CR1_POS_DISCNUM 13 // len 3b
	#define _ADC_CR1_POS_DUALMOD 16
	
	#define _ADC_CR2_POS_ADON   0
	#define _ADC_CR2_POS_CONT   1
	#define _ADC_CR2_POS_DMA    8
	#define _ADC_CR2_POS_ALIGN  11
	#define _ADC_CR2_POS_EXTSEL 17 // len 3b
	#define _ADC_CR2_POS_ExtTrig 20
	#define _ADC_CR2_POS_SWStart 22
	
	#define _ADC_SQR1_POS_L     20 // len 4b
	


	namespace ADCReg {
		typedef enum {
			SR = 0, CR1, CR2, SMPR1,
			SMPR2, JOFR1, JOFR2, JOFR3,
			JOFR4, HTR, LTR, SQR1,
			SQR2, SQR3, JSQR, JDR1,
			JDR2, JDR3, JDR4, DR
		} ADCRegType;
	}
	namespace ADCSample {
		enum ADCSample {
			HALF_3 = 0,// 1.5 cycles
			HALF_15,// 7.5 cycles
			HALF_27,// 13.5 cycles
			HALF_57,// 28.5 cycles
			HALF_83,// 41.5 cycles
			HALF_111,// 55.5 cycles
			HALF_143,// 71.5 cycles
			HALF_479,// 239.5 cycles
		};
	}

	class ADC_t {
	protected:
		stduint baseaddr;
		byte ADC_ID;
		stduint _numsof_conv/*0..1+16*/; bool _align_left; stduint _numsof_disc; bool _trigger_ext_posedge;
		pureptr_t bind;
		// return 0xFF for invalid channel for the pin
		byte getChannelNumber(GPIO_Pin& pin) {
			if (getID() == 3) {
				if (pin.getID() < 4) {
					if (&pin.getParent() == &GPIO['A']) return pin.getID();
					else if (&pin.getParent() == &GPIO['C']) return pin.getID() + 10;
					else return 0xFF;
				}
				else return 0xFF;
			}
			else if (getID() < 3) {
				if (&pin.getParent() == &GPIO['A']) return pin.getID() < 8 ? pin.getID() : 0xFF;
				else if (&pin.getParent() == &GPIO['B']) return pin.getID() < 2 ? (8 + pin.getID()) : 0xFF;
				else if (&pin.getParent() == &GPIO['C']) return pin.getID() < 6 ? (10 + pin.getID()) : 0xFF;
				else return 0xFF;
			}
			else return 0xFF;
		} // from F103VET6
	public:
		ADC_t(stduint baseaddr, byte ADC_ID) : baseaddr(baseaddr), ADC_ID(ADC_ID) { _numsof_conv = _numsof_disc = 0; _align_left = _trigger_ext_posedge = false; bind = 0; }
		stduint getBaseAddr() { return baseaddr; }
		byte getID() { return ADC_ID; }
		inline stduint getConfigLastDiscCount() { return _numsof_disc; }
		Reference operator[](ADCReg::ADCRegType idx) {
			return Reference(baseaddr + (_IMM(idx) << 2));
		}
		bool isTriggeredBySoftware() { // ADC1_2_3_SWSTART
			return (self[ADCReg::CR2] & (0x7 << _ADC_CR2_POS_EXTSEL)) == ((stduint)0x7 << _ADC_CR2_POS_EXTSEL);// 0x000E0000
		}
		bool enClock(bool ena = true, byte divby = 6);
		// called by setMode(inp false) and enInterrupt(not-DMA)
		bool enAble(bool ena = true) {
			// Prerequisite: setMode
			self[ADCReg::CR2].setof(_ADC_CR2_POS_ADON, ena);
			_TEMP while (self[ADCReg::CR2].bitof(_ADC_CR2_POS_ADON) != ena);
			return true;
		}
		bool setMode(stduint numsof_conv = 0/*0..1+16*/, bool align_left = false, stduint numsof_disc = 0/*0..1+8*/, bool trigger_ext_posedge = false, byte divby = 6);

		bool setChannel(GPIO_Pin& pin, byte rank = 0/*0..16*/, ADCSample::ADCSample sample = ADCSample::HALF_111);
		// bool setChannel(MORE...)

		void enInterrupt(bool enable = true, bool trigger_ext_posedge = false);
		void setInterrupt(Handler_t fn);
		void setInterruptPriority(byte preempt, byte sub_priority);

		//{TODO} combinate this and enInterrupt into setMode or enAble
		bool enDMA(pureptr_t addr, stduint leng);

		ADC_t& operator>> (uint32_t& val) {
			//aka HAL_ADC_GetValue
			val = self[ADCReg::DR];
			return self;
		}

		bool setDMA(bool periph_inc = false, bool memory_inc = false, stduint periph_align = 2 /*byte*/, stduint memory_align = 2 /*byte*/, bool circular_mode = true, byte priority = 1);


	};

	extern ADC_t ADC1, ADC2, ADC3;
	static struct {
		ADC_t& operator[](byte id) {
			extern ADC_t ADCr;
			switch (id) {
			case 1: return ADC1;
			case 2: return ADC2;
			case 3: return ADC3;
			default: return ADCr;
			}
		}
	} ADC;

#endif
}

#endif
