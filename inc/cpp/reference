// ASCII CPP TAB4 CRLF
// Attribute: <ArnCovenant> <Env> <bin^%> <CPU()> [Allocation]
// LastCheck: <date>
// AllAuthor: @dosconio
// ModuTitle: ...
// Copyright: UNISYM led by ArinaMgk, Apache License, Version 2.0, unisym.org

#ifndef _INC_REFERENCE
#define _INC_REFERENCE

#include "../c/stdinc.h"

#define Reflocal(x) stduint _##x; Reference x _IMM(&_##x); _##x

namespace uni {

	template <typename typeDest> class Reference_T {
	protected:
		volatile typeDest* address;
	public:
		Reference_T(typeaddr _address = 0) : address((volatile typeDest*)_address) {}
		Reference_T(pureptr_t _address) : address((volatile typeDest*)_address) {}
		operator typeDest() const { return *address; }
		volatile typeDest* operator&() const { return address; }
		Reference_T& operator= (typeDest val) { *address  = val; return self; }
		Reference_T& operator= (const Reference_T& val) { *address = typeDest(val); return self; }
		Reference_T(const Reference_T& other) {
			address = other.address;
		}
		Reference_T& operator&=(typeDest val) { *address &= val; return self; }
		Reference_T& operator|=(typeDest val) { *address |= val; return self; }
		Reference_T& operator^=(typeDest val) { *address ^= val; return self; }
		inline bool bitof(stduint idx) const { return *address & _IMM1S(idx); }
		inline void setof(stduint idx, bool val = true) { if (val) *address |= _IMM1S(idx); else rstof(idx); }
		inline void rstof(stduint idx) { *address &= ~_IMM1S(idx); }
		// Read with Mask
		stduint mask(stduint bitposi, stduint bitslen) const {
			// e.g. mask(3,2): L_MASK{0b11} aka 
			//      0b11000
			// index: 43210
			const stduint L_MASK = _IMM1S(bitslen) - 1;
			return (*address) & (L_MASK << bitposi);
		}
		stduint masof(stduint bitposi, stduint bitslen) const {
			return mask(bitposi, bitslen) >> bitposi;
		}
		// Write with Mask
		stduint maset(stduint bitposi, stduint bitslen, stduint val) {
			const stduint L_MASK = _IMM1S(bitslen) - 1;
			stduint tmp = (*address);
			tmp &= ~(L_MASK << bitposi);// keep others
			tmp |= (val & L_MASK) << bitposi;
			return *address = tmp;
		}
	};
	
	typedef Reference_T<typedest> Reference;
	template <typename typeDest> class Bitfield_T : public Reference_T<typeDest> {
	public:
		byte pos, len;
		Bitfield_T(pureptr_t _address, byte _pos, byte _len) : Reference_T<typeDest> _IMM(_address), pos(_pos), len(_len) {}
		//
		template <typename type0>
		Bitfield_T(const Reference_T<type0>& _refer, byte _pos, byte _len) : Reference_T<typeDest>((pureptr_t)&_refer), pos(_pos), len(_len) {}
		operator stduint() const { return Reference_T<typeDest>::masof(pos, len); }
		stduint operator= (stduint val) { return Reference_T<typeDest>::maset(pos, len, val); }
	};
	typedef Bitfield_T<typedest> Tdsfield;
	typedef Bitfield_T<stduint> Stdfield;
}

#endif
