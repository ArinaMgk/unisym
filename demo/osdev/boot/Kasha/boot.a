; ASCII TAB4 CRLF
; Copyright: ArinaMgk UniSym, Apache License Version 2.0

BOOTADDR EQU 0X7C00
BOOTSEGM EQU 0X07C0
VRAMSEGM EQU 0XB800
PROGSEGM EQU 0X0800
;BELOW ARE SOME-STANDARD FAT FLOPPY CODE
JMP BOOTSTART
	NOP;?
	DB 'KASHADOS'
	DW 512		;BYTES/SECTOR
	DB 1		;SECTOR/CLUSTER
	DW 1		;NUMOF BOOT SECTOR?
	DB 2		;NUMOF FAT
	DW 224		;MAX OF FILES IN ROOTPATH
	DW 2880		;NUMOF LOGI SECTORS
	DB 0XF0		;KINDOF DISK
	DW 9		;SECTORS/FAT
	DW 18		;SECTORS/TRACK
	DW 2		;NUMOF HEADS
	DD 0		;NUMOF HIDEN SECTORS
	DD 2880		;?
	DB 0,0,0X29	;?
	DD 0XFFFFFFFF;volume serial number
	DB 'KASHA BOOT ';11CHARS
	DB 'FAT12   ';FILE SYSTEM
BOOTSTART:
;STOP INT TIL STACK SETTLED
	CLI
	XOR AX,AX
	MOV SS,AX
	MOV SP,BOOTADDR
	STI
;PRINT HELLO
	MOV AX,BOOTSEGM
	MOV DS,AX
	MOV SI,STR1
	CALL FUNC_PRINT_STR
;INPUT
	XOR AH,AH
	INT 0X16
	AND AL,1101_1111b
	XOR DL,DL;CAUTION INFLUENCE FLAGS
	CMP AL,'F'
	JZ FUNC_LOAD_0;
	MOV DL,0X81
	CMP AL,'C'
	JZ FUNC_LOAD_0;
	CMP AL,'A'
	JZ FUNC_LOAD_1;
	MOV DL,0X80
	JMP FUNC_LOAD_0;
;LOAD
	;PERFORMAL FUNC LOAD AFTER SET DL
	FUNC_LOAD_0:;DL=Floppy(00);Disk(80);CD(81)NORMAL
	XOR CH,CH
	MOV CL,2
	MOV AX,PROGSEGM
	MOV ES,AX
	MOV AL,0x01
	XOR DH,DH
	XOR BX,BX
	JMP FUNC_LOAD
	FUNC_LOAD_1:;Advance
	MOV SI,STR2
	CALL FUNC_PRINT_STR
		;READ CHAR:DL
		XOR BX,BX
		CALL FUNC_INPUT_
		SHL DL,4
		MOV DH,DL
		CALL FUNC_INPUT_
		OR DL,DH
		MOV CH,DL
	MOV SI,STR3
	CALL FUNC_PRINT_STR
		;DH
		CALL FUNC_INPUT_
		SHL DL,4
		MOV CL,DL
		CALL FUNC_INPUT_
		MOV DH,DL
		OR DH,CL
		MOV DL,CH
	PUSH DX;
	MOV SI,STR4
	CALL FUNC_PRINT_STR
		;CH
		CALL FUNC_INPUT_
		SHL DL,4
		MOV CL,DL
		CALL FUNC_INPUT_
		MOV CH,DL
		OR CH,CL
	MOV SI,STR5
	CALL FUNC_PRINT_STR
		;CL
		CALL FUNC_INPUT_
		SHL DL,4
		MOV CH,DL
		CALL FUNC_INPUT_
		MOV CL,DL
		OR CL,CH
	PUSH CX;
	MOV SI,STR6
	CALL FUNC_PRINT_STR
		;AL
		CALL FUNC_INPUT_
		SHL DL,4
		MOV CL,DL
		CALL FUNC_INPUT_
		MOV AL,DL
		OR AL,CL
	POP CX;
	POP DX;
	XOR BX,BX
	PUSH AX
	MOV SI,STR9
	CALL FUNC_PRINT_STR
	MOV AX,PROGSEGM
	MOV ES,AX;JUST USE BX 0000~FFFF RAM
	POP AX
	FUNC_LOAD:
	;MOV AX,0X0201;FUNC02 READ01SECTORS
	MOV AH,0x02
	INT 0X13
	JC ENDO;ERR
	MOV AL,BYTE[ES:0];not 10
	SUB AL,1
	JZ TOESBX
	;MOVZX CX,AL
	;FOR SAFETY, THE ARRANGE OF SECTORS IS 1~12
	MOV BX,512
	INC CL
	MOV AH,0X02
	INT 0X13
	JC ENDO
	JMP TOESBX
CLI
ENDO HLT
JMP ENDO
TOESBX:
JMP 0x0800:0x0001

;DEBUG POINT : WHICH CALL FUNCS
;FUNC PRINT STRING AFTER (SET SI) AND (CHK CUR AND FIRST!=0)
	FUNC_PRINT_STR:
	XOR BX,BX
	MOV AH,0X0E
	MOV AL,BYTE[SI]
	INC SI
	FUNC_PRINT_STR_LOOP:
	INT 0X10
	MOV AL,BYTE[SI]
	INC SI
	OR AL,AL	;08C0 WHILE CMP AL,0 3C00
	JNZ FUNC_PRINT_STR_LOOP
	RET
;FUNC INPUT HEX RET-DL AFTER KEEP BX=0
	FUNC_INPUT_:
	XOR AH,AH
	CLI
	INT 0X16
	MOV DL,AL
	CMP AL,'0'
	JB FUNC_INPUT_
	CMP AL,'9'
	JA _LABEL_ABOVE9_
	ADD DL,0X07
	JMP _LABEL_NUM
	_LABEL_ABOVE9_:
	AND AL,1101_1111b
	CMP AL,'A'
	JB FUNC_INPUT_
	CMP AL,'F'
	JA FUNC_INPUT_
	_LABEL_NUM:
	SUB DL,0X37
	MOV AH,0X0E
	INT 0X10
	STI
	RET
STR1 DB 'KASHA BOOT',0x0D,0X0A,'[F]from Floppy',0x0D,0X0A,'[*]from Disk',0x0D,0X0A,'[C]from CD/Slave',0x0D,0X0A,'[A]advance',0x0D,0x0A,0
STR2 DB 'DRIV HEX>',0
STR3 DB 0x0D,0X0A,'HEAD HEX>',0
STR4 DB 0x0D,0X0A,'TRAK HEX>',0
STR5 DB 0x0D,0X0A,'STARTSEC>',0
STR6 DB 0x0D,0X0A,'NUMOFSEC>',0
STR9 DB '!',0x0D,0X0A,0

TIMES 510-$+$$ DB 0
DW 0XAA55
