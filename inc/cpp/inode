// ASCII C++ TAB4 CRLF
// Attribute: <ArnCovenant> <Env> <bin^%> <CPU()> [Allocation]
// LastCheck: 
// AllAuthor: @dosconio
// ModuTitle: Identifier Node for C++
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_X_INODE
#define _INC_X_INODE

#ifndef _INC_CPP
#define _INC_CPP
#endif

#include "cinc"
#include "../c/alice.h"
#include "cinc"
#include "node"

namespace uni {

	class Inode : public Node {
	public:
		Inode(const char* in_addr = 0, const void* data = 0, stduint typ = 0, bool readonly = false, bool typekeep = false) :  data(data), type(typ), readonly(readonly), typekeep(typekeep), next(0), addr((char*&)Node::offs) { addr = (char*)in_addr; }
		const void* data;
		stduint type;
		struct {
			bool readonly;
			bool typekeep;
		};
		Inode* next;
		// `char*& addr = (char*&)Node::offs;` MSVC default initializer can deal with this but GCC.
		char*& addr;
	};

	class InodeChain : public NodeChain {
	public:
		InodeChain(bool need_free);
		~InodeChain();
		void Append(const char* addr, const void* data, stduint typ, bool readonly = false, bool typekeep = false);
		void Sort();
		Inode* Index(const char* content);
		// inherited stduint Count() ... 
		Inode* Root() {
			return (Inode*)root_node;
		}
		Inode* Remove(Inode* inod, bool systematic = true);
		void Remove(const char* content);
		void SetFreeContent(bool need_free);
		bool Update(const char* iden, void* data, size_t typ, bool readonly = false, bool typekeep = false);
	protected:
		Inode*& root_node; // = (Inode*&)NodeChain::root_node;
		Inode*& last_node; // = (Inode*&)NodeChain::last_node;
		//{TODO}
	};
}

#endif
