// ASCII CPP-ISO11 TAB4 CRLF
// Docutitle: (Device) Alternate Function I/O
// Codifiers: @dosconio: 20240527
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_AFIO_X
#define _INC_DEVICE_AFIO_X

#include "../unisym"
#include "../binary"
#include "../reference"

namespace uni {

#if 0

#elif defined(_MCU_STM32F1x)
	#undef AFIO
	#define _AFIO_ADDR 0x40010000 //~ 0x400103FF
	class AFIO {
	protected:
		
	public:
		static Reference EventCtrlReg;// AFIO_EVCR
		static Reference MapReg;// AFIO_MAPR
		static Reference ExternInterruptCfgs[4];// AFIO_EXTICRx

	};

#elif defined(_MCU_STM32F4x) // aka SYSCFG

	#define _SYSCFG_ADDR 0x40013800 //~ 0x40013BFF
	class SYSCFG {
	protected:

	public:
		static Reference MEMRM;
		static Reference PMC;
		static Reference ExternInterruptCfgs[4];
		static Reference CMPCR;

	};
	typedef SYSCFG AFIO;

#elif defined(_MCU_MSP432P4) // aka SYSCTL

	typedef struct {
		uint32 REBOOT_CTL;      // [IO] Reboot Control Register */
		uint32 NMI_CTLSTAT;     // [IO] NMI Control and Status Register */
		uint32 WDTRESET_CTL;    // [IO] Watchdog Reset Control Register */
		uint32 PERIHALT_CTL;    // [IO] Peripheral Halt Control Register */
		uint32 SRAM_SIZE;       // [I ] SRAM Size Register */
		uint32 SRAM_BANKEN;     // [IO] SRAM Bank Enable Register */
		uint32 SRAM_BANKRET;    // [IO] SRAM Bank Retention Control Register */
		uint32 RESERVED0;
		uint32 FLASH_SIZE;      // [I] Flash Size Register */
		uint32 RESERVED1[3];
		uint32 DIO_GLTFLT_CTL;  // [IO] Digital I/O Glitch Filter Control Register */
		uint32 RESERVED2[3];
		uint32 SECDATA_UNLOCK;  // [IO] IP Protected Secure Zone Data Access Unlock Register */
	} SYSCTL_Type;
#define SYSCTL ((SYSCTL_Type *) SYSCTL_BASE)
	//
#define SYSCTL_SRAM_BANKEN_BNK7_EN  (0x00000080) // SRAM Bank1 enable


#endif

}

#endif
