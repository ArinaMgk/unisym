// ASCII C++-11 TAB4 CRLF
// Attribute: [Allocation]
// LastCheck: 20240409
// AllAuthor: @dosconio
// ModuTitle: Node for C++
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_NODE_X
#define _INC_NODE_X

#ifndef _INC_CPP
#define _INC_CPP
#endif

#include "cinc"
#include "../c/stdinc.h"
#include "../c/node.h"
#include "cinc"

#include <iostream>

namespace uni {

	// ---- ---- Scheme {data*, link} ---- ----
	class NodeChain {
	public:
		NodeChain(bool need_free = false);
		~NodeChain();

		toheap Node* Append(const char* addr);
		Node* Append(const void* addr, bool onleft = false, Node* nod = 0);

		template <typename type1>
		inline NodeChain& operator<<(const type1* addr) {
			Append((const void*)addr);
			return *this;
		}
		inline static void Exchange(Node* n1, Node* n2) {
			if (n1 != n2) xchgptr(n1->offs, n2->offs);
		}
		void Index(void* content);
		stduint Count() { return node_count; }
		Node* Root() { return root_node; }// Reference version: Head() , which fits at least 1 item
		Node* Last() { return last_node; }// Reference version: Tail() , which fits at least 1 item
		void Remove(const stduint iden);
		void Remove(const void* content);
		void Remove(Node* nod);
		void SetFreeContent(bool need_free);
		void Onfree(void(*fn_free)(void*) = 0, bool need_free = true, bool pass_whole = true) {
			_node_freefunc = fn_free;
			need_free_content = need_free;
			free_pass_whole = pass_whole;
		}
		// insertion sort, ignoring `sorted`
		void SortByInsertion();
		// selection sort, ignoring `sorted`
		void SortBySelection();
		void Onsort(bool sorted = true, bool little_to_big = true, int (*fn_compare)(const void*, const void*) = 0) {
			this->sorted = sorted;
			this->little_endian = little_to_big;
			this->_node_compare = fn_compare;
		}
		
		Node* operator+(stduint idx) {
			Node* crt = Root();
			if (idx) do {
				crt = crt->next;
			} while (--idx);
			return idx ? 0 : crt;
		}

		NodeChain& operator<< (const void* addr) {
			Append(addr);
			return *this;
		}

	protected:
		stduint node_count;
		Node* root_node;
		Node* last_node;
		bool need_free_content;
		void(*_node_freefunc)(void*);
		bool sorted;
		bool little_endian;
		bool free_pass_whole;
		int (*_node_compare)(const void* addr0, const void* addr1);// return 0 for equal, 1 for greater, -1 for less
	};
	
	// For usual developers, the derived class from the template classes are more usual.
	// The version of UNISYM allows you put implementation codes into independent documents.
	//[Abandoned] alias LinearChain: NodeChain

	// ---- ---- Scheme {data, link} ---- ----

	#include "../c/com/NodeInsert.h"
	template <typename type0> struct SingleLinkNode {
		type0 val;
		SingleLinkNode<type0>* nex;
		SingleLinkNode(void) : val(), nex(nullptr) {}
		// ~SingleLinkNode() {}
		inline SingleLinkNode<type0>* InsertNext(const type0& val) {
			_COM_NodeInsert(SingleLinkNode<type0>, this, val, nex);
		}
		SingleLinkNode& operator=(const type0& val) {
			this->val = val;
			return *this;
		}
		type0& operator*() {
			return val;
		}
	protected:

	};
	
	template <typename type0> class SingleLinkList : public SingleLinkNode<type0> {
	public:
		
		SingleLinkList(void) : SingleLinkNode<type0>::SingleLinkNode(), nex(SingleLinkNode<type0>::nex) {}
		
		~SingleLinkList() {
			SingleLinkNode<type0>* crt = nex, *next = nullptr;
			while (crt) {
				next = crt->nex;
				//delete crt;
				mfree(crt);
				crt = next;
			}
		}

		bool isEmpty() { return !nex; }

		SingleLinkNode<type0>* Root() { return nex; }
		SingleLinkNode<type0>* Last() {
			SingleLinkNode<type0>* crt = this;
			if (!nex) return nullptr;
			while (crt->nex) crt = crt->nex;
			return crt;
		}

		stduint Count() {
			stduint cnt = 0;
			SingleLinkNode<type0>* crt = this;
			while (crt->nex) {
				cnt++;
				crt = crt->nex;
			}
			return cnt;
		}

		SingleLinkNode<type0>* Insert(const type0& val, bool onleft = false, SingleLinkNode<type0>* nod = 0) {
			SingleLinkNode<type0>* tmp = 0, * last = this, * crt = this->nex;
			// not exist order system
			if (!crt) return this->InsertNext(val);
			if (nod) do {
				if (crt != nod) continue;
				return (onleft ? last : nod)->InsertNext(val);
			} while (AssignParallel(last, crt, crt->nex));
			if (nod) return nullptr;// out of the chain
			return Last()->InsertNext(val);
		}

		SingleLinkNode<type0>* Append(const type0& val, bool onhead = false) {
			return Insert(val, false, (onhead||isEmpty()) ? this : Last());
		}

		bool Remove(SingleLinkNode<type0>* nod) {
			if (nullptr == nod) return false;// companion with Index(*)
			SingleLinkNode<type0>* lef = IndexLeft(nod);
			asserv(lef)->nex = nod->nex;
			delete nod;
		}

		SingleLinkNode<type0>* Index(const type0& val) const {
			SingleLinkNode<type0>* crt = this->nex;
			if (nullptr == crt) return nullptr;
			do if (val == crt->val) return crt; while (crt = crt->nex);
			return nullptr;
		}

		inline bool isExist(const SingleLinkNode<type0>* nod) const {
			SingleLinkNode<type0>* crt = this->nex;
			if (nullptr == nod) return false;
			do if (nod == crt) return true; while (crt = crt->nex);
			return false;
		}

		// Including this, the heading root.
		SingleLinkNode<type0>* IndexLeft(const SingleLinkNode<type0>* nod) const {
			SingleLinkNode<type0>* crt = (SingleLinkNode<type0>*)this;
			if (nullptr == nod) return nullptr;
			do if (nod == crt->nex) return crt; while (crt = crt->nex);
			return nullptr;
		}

		// the only un-ordered operation
		inline SingleLinkList<type0>* push(const type0& apd, bool onhead = false) {
			this->Append(apd, onhead);
			return this;
		}

		// on tail
		inline SingleLinkList<type0>& operator<< (const type0& apd) {
			return *push(apd);
		}

		inline std::ostream& operator>> (std::ostream& out) {
			stduint i = 0;
			std::cout << "SingleLinkList[" << Count() << "] = { " << std::endl;
			SingleLinkNode<type0>* crt = this->nex;
			while (crt) {
				std::cout << "\t" << crt->val << ", // at index " << i++ << std::endl;
				crt = crt->nex;
			}
			return std::cout << "}" << std::endl;
		}

		inline bool operator !() {
			return isEmpty();
		}
		
		inline SingleLinkNode<type0>* operator[] (const type0& val) {
			return Index(val);
		}

	protected:
		SingleLinkNode<type0>*& nex;
	};

}

#endif

