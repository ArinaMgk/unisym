// ASCII CPP TAB4 CRLF
// Docutitle: Reset and Clock Control
// Datecheck: 20240416 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_X
#define _INC_DEVICE_RCC_X

#include "../../unisym"
#include "../../reference"

#include "RCCAddress"
#include "RCCClock"
#include "RCCOscillator"
#include "RCCPrescaler"
#include "RCCPLL"

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x) || defined(_MCU_CW32F030)
#define _SCC_DEFAULT HSI_VALUE
#elif defined(_MPU_STM32MP13)
#define _SCC_DEFAULT 64000000
#else
#define _SCC_DEFAULT 8000000
#endif

extern stduint SystemCoreClock;
extern stduint SysTickHz;
#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)
namespace uni {
	extern const uint8_t AHBPrescTable[16];
	extern const uint8_t APBPrescTable[8];
}
#endif

namespace uni {
#ifdef _MCU_STM32F1x

	// use namespace to be comopatible with old C++ compilers
	namespace FlashLatency {
		enum FlashLatency {
			LATENCY_0 = 0,
			LATENCY_1 = 1,
			LATENCY_2 = 2
		};
	}
	class RCC_t {
	protected:
		//{TODO} Reference Conreg(_RCC_CR); Reference Cfgreg(_RCC_CFGR); ...
		//{TEMP} Position Flash here:
		FlashLatency::FlashLatency getLatency() {
			Reference _FLASH_ACReg(0x40022000);
			return (FlashLatency::FlashLatency)(_FLASH_ACReg & 0x7);
		}
		void setLatency(FlashLatency::FlashLatency FLatency) {
			Reference _FLASH_ACReg(0x40022000);
			_FLASH_ACReg = (_FLASH_ACReg & ~(0x7)) | FLatency;
		}

	public:
		RCCOscillatorHSE HSE;
		RCCOscillatorHSI HSI;
		RCCOscillatorLSE LSE;
		RCCOscillatorLSI LSI;
		RCCPLL PLL;
		RCCSystemClock Sysclock;
		RCCAHB AHB;
		RCCAPB APB1, APB2;
		//
		Reference Cfgreg;
		//
		inline Reference operator[](RCCReg::RCCReg idx) { return Reference(_RCC_ADDR + (((stduint)idx) << 2)); }
		RCC_t() : APB1(1), APB2(2), Cfgreg(_RCC_CFGR) {
			
		}
		//
		bool setFlash(bool decrease = false, FlashLatency::FlashLatency FLatency = FlashLatency::LATENCY_2) { // param in order of using frequence, under C++ rules
			//{TODO} HAL-macro FLASH_ACR_LATENCY
			// "Increasing the number of wait states because of higher CPU frequency"
			// "Decreasing the number of wait states because of lower CPU frequency"
			if (FLatency == getLatency()) return true;
			if ((FLatency > getLatency()) ^ decrease) // (>)^fasle=origin(>)
				setLatency(FLatency);
			return FLatency == getLatency();
		}
		bool setClock(SysclkSource::RCCSysclockSource source);

		// temp area
		stduint getFrequencyHCLK() {
			return SystemCoreClock;
		}//{TODEL}
		stduint getFrequencyPCLK1();
		stduint getFrequencyPCLK2();

	};

	//
	extern RCC_t RCC;

#elif defined(_MCU_STM32F4x)
	
	class RCC_t {
	protected:
		_TEMP byte getLatency() {
			Reference _FLASH_ACReg(0x40023C00);
			return (_FLASH_ACReg & 0x7);
		}
		_TEMP void setLatency(byte FLatency) {
			FLatency &= 0x7;
			Reference _FLASH_ACReg(0x40023C00);
			_FLASH_ACReg = (_FLASH_ACReg & ~(0x7)) | FLatency;
		}
	public:
		RCCOscillatorHSE HSE;
		// RCCOscillatorHSI HSI;
		// RCCOscillatorLSE LSE;
		// RCCOscillatorLSI LSI;
		RCCPLL PLL;
		RCCSystemClock Sysclock;
		RCCAHB AHB;
		RCCAPB APB1, APB2;
		inline Reference operator[](RCCReg::RCCReg idx) { return Reference(_RCC_ADDR + (((stduint)idx) << 2)); }
		RCC_t() : APB1(1), APB2(2) {}
		_TEMP bool setFlash(bool decrease = false) {
			stduint FLatency = _TEMP 5;// FLASH_LATENCY_5
			if ((FLatency > getLatency()) ^ decrease) // `=`need-not-consider
				setLatency(FLatency);
			return FLatency == getLatency();
		}
		bool setClock(SysclkSource::RCCSysclockSource source);



		// temp area
		stduint getFrequencyHCLK() {
			return SystemCoreClock;
		}//{TODEL}
		stduint getFrequencyPCLK1();
		stduint getFrequencyPCLK2();


	};

	extern RCC_t RCC;

#elif defined(_MPU_STM32MP13)

	
	class RCC_t {
	public:
		union {
			RCCOscillatorHSE HSE;
			RCCOscillatorHSI HSI;
			RCCOscillatorCSI CSI;
			RCCOscillatorLSI LSI;
			RCCOscillatorLSE LSE;
		};
		RCCPLL& PLL1 = *(RCCPLL*)_IMM(1);
		RCCPLL& PLL2 = *(RCCPLL*)_IMM(2);
		RCCPLL& PLL3 = *(RCCPLL*)_IMM(3);
		RCCPLL& PLL4 = *(RCCPLL*)_IMM(4);
		RCCSystemClock Sysclock;
		//
		AXISS_t AXIS;
		MLAHB_t MLAHB;
		RCCAPB& APB1 = *(RCCAPB*)_IMM(1);
		RCCAPB& APB2 = *(RCCAPB*)_IMM(2);
		RCCAPB& APB3 = *(RCCAPB*)_IMM(3);
		RCCAPB& APB4 = *(RCCAPB*)_IMM(4);
		RCCAPB& APB5 = *(RCCAPB*)_IMM(5);
		RCCAPB& APB6 = *(RCCAPB*)_IMM(6);

		//
		inline Reference operator[](RCCReg::RCCReg idx) const { return _RCC_ADDR + _IMMx4(idx); }
		//{} void* operator->() const { return (void*)_RCC_ADDR; }

		// Reset Mode 
		// [AKA] HAL_RCC_DeInit
		// [DO.]
		// - HSI ON and used as system clock source
		// - HSE, PLL1, PLL2 and PLL3 and PLL4 OFF
		// - AHB, APB Bus pre-scaler set to 1.
		// - MCO1 and MCO2 OFF
		// - All interrupts disabled (except Wake-up from CSTOP Interrupt Enable)
		// [NOT] HSECSS, LSECSS, LSI, LSE, RTC and Peripheral clock
		// - Peripheral clocks
		void canMode() const;

		
		// _TEMP AREA

		// aka __HAL_RCC_GET_MPU_DIV
		stduint getMPUDiv() const {
			stduint ret{ self[RCCReg::MPCKDIVR].masof(0, 4) + 1 };// MPUDIV
			MIN(ret, 16)
			return ret;
		}

		// AKA __HAL_RCC_SYSCFG_CLK_ENABLE for APB3
		// ? can move into APB3?
		void enSyscfg(bool ena = true) const;

	};

	extern RCC_t RCC;
#endif
}
#endif
