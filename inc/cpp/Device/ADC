// UTF-8 CPP-ISO11 TAB4 CRLF
// Docutitle: (Device) Analog-Digital Converter
// Codifiers: @dosconio: 20240709~;
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
// Dependens: GPIO and other ADC Channnels
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_Device_ADC
#define _INC_Device_ADC

#include "../unisym"
#include "../reference"
#include "../trait/XstreamTrait.hpp"
#include "../../c/binary.h"
#include "GPIO"
#include "DMA"

namespace uni {

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)
	class ADC_t;
	#undef ADC
	#undef ADC1
	#undef ADC2
	#undef ADC3
	extern ADC_t ADC1, ADC2, ADC3;

	namespace ADCReg {
		typedef enum {
			SR = 0, CR1, CR2, SMPR1,
			SMPR2, JOFR1, JOFR2, JOFR3,
			JOFR4, HTR, LTR, SQR1,
			SQR2, SQR3, JSQR, JDR1,
			JDR2, JDR3, JDR4, DR
		} ADCRegType;
	}
#elif defined(_MPU_STM32MP13)
	enum class ADCReg {
		ISR,// Interrupt and Status Register
		IER,// Interrupt Enable Register
		CR,// Control Register
		CFGR1,// 0x0X, "CFGR1" maybe "CFGR"
		//
		CFGR2,
		SMPR1, SMPR2, RESERVED0,// 0x1X sample time
		TR1, TR2, TR3, RESERVED1,// 0x2X watchdog threshold
		SQR1, SQR2, SQR3, SQR4,// 0x3X regular sequence
		// 0x4X :
		DR,// regular data
		RESERVED2, RESERVED3, JSQR,// injected sequence
		// 0x6X :
		OFR1 = 0x60/4, OFR2, OFR3, OFR4,// Offset Register
		// 0x8X :
		JDR1 = 0x80 / 4, JDR2, JDR3, JDR4,// Injected Data Register
		// 0xAX :
		AWD2CR = 0xA0 / 4, AWD3CR, RESERVED4, RESERVED5,// Analog Watchdog
		DIFSEL,// Differential mode Selection
		CALFACT,// Calibration Factors
		OR = 0xC8 / 4, // Option
		//
		HWCFGR0 = 0x3F0 / 4,// hardware configuration
		VERR,// Version
		IPIDR,// ID
		SIDR// Size ID
	};// AKA ADC_TypeDef

#endif	


#if 0
#elif defined(_MCU_STM32F1x)

	_TODO // into an enum
	#define _ADC_SR_POS_EOC      1
	#define _ADC_SR_POS_STRT     4
	
	#define _ADC_CR1_POS_EOCIE   5
	#define _ADC_CR1_POS_SCAN    8
	#define _ADC_CR1_POS_DISCEN  11
	#define _ADC_CR1_POS_DISCNUM 13 // len 3b
	#define _ADC_CR1_POS_DUALMOD 16
	
	//#define _ADC_CR2_POS_ADON   0
	//#define _ADC_CR2_POS_CONT   1
	//#define _ADC_CR2_POS_DMA    8
	//#define _ADC_CR2_POS_ALIGN  11
	#define _ADC_CR2_POS_EXTSEL 17 // len 3b
	#define _ADC_CR2_POS_ExtTrig 20
	#define _ADC_CR2_POS_SWStart 22
	
	

	namespace ADCSample {
		enum ADCSample {
			HALF_3 = 0,// 1.5 cycles
			HALF_15,// 7.5 cycles
			HALF_27,// 13.5 cycles
			HALF_57,// 28.5 cycles
			HALF_83,// 41.5 cycles
			HALF_111,// 55.5 cycles
			HALF_143,// 71.5 cycles
			HALF_479,// 239.5 cycles
		};
	}
#elif defined(_MCU_STM32F4x)
	namespace ADCReg {
		typedef enum {
			CSR, CCR, CDR
		} ADCComType;
	}

	namespace ADCSample {
		enum ADCSample {
			CYCL_3 = 0,// 3 cycles
			CYCL_15,// 15 cycles
			CYCL_28,// 28 cycles
			CYCL_56,// 56 cycles
			CYCL_84,// 84 cycles
			CYCL_112,// 112 cycles
			CYCL_144,// 144 cycles
			CYCL_480,// 480 cycles
		};
	}

#elif defined(_MPU_STM32MP13)
	enum class ADCCom {
		CSR = 0x300 / 4,// Control Status Register
		CCR = 0x308 / 4,// Control Register
	};// AKA ADC_Common_TypeDef
	
#endif

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)

	class ADC_t
		: public RuptTrait, public IstreamTrait
	{
	protected:
		byte ADC_ID;
		pureptr_t bind;
		// return 0..19 normally, 0xFF for invalid channel for the pin
		byte getChannelNumber(GPIO_Pin& pin);
	public:
		_COM_DEF_Interrupt_Interface();
		ADC_t(byte _ADC_ID) : ADC_ID(_ADC_ID) { bind = 0; }
		stduint getBaseAddr() const;
		byte getID() const { return ADC_ID; }
		Reference operator[](ADCReg::ADCRegType idx) const {
			 return getBaseAddr() + _IMMx4(idx);
		}
	#if defined(_MCU_STM32F4x)
		static Reference Reflect(ADCReg::ADCComType idx);
	#endif
		// ---- ---- . ---- ---- . ---- ---- . ---- ---- 
		bool enClock(bool ena = true, byte divby = 6);
		// AD Conversion ON/OFF
		// - Prerequisite: setMode.
		// - called by setMode(inp false) and enInterrupt(not- DMA)
		bool enAble(bool ena = true) const;
		// aka (HAL_)ADC_Init
		/* [ dosconio design yo 20240711 ]
		 * DataAlign <=> align_left
		 * ScanConvMode = !!numsof_conv // regular / continuous conversion
		 * NbrOfConversion = numsof_conv ? numsof_conv : none
		 *
		 * DiscontinuousConvMode = !!numsof_disc;
		 * ContinuousConvMode = !numsof_disc;
		 * NbrOfDiscConversion = numsof_disc ? numsof_disc : none
		 *
		 * ExternalTrigConv <=> trigger_ext
		*/
		/* numsof_conv in range 0..1+16
		 * numsof_disc in range 0..1+8
		 * trigger_ext
		 *     { 0 and non-0 . for F1 }
		 *     { 0(None) 1(Rise) 2(Fall) 3(Both) . for F4 }
		*/
		bool setMode(stduint numsof_conv = 0, bool align_left = false, stduint numsof_disc = 0, stduint trigger_ext = 0, byte divby = 6);
		stduint getConfigLastDiscCount();
		// may setMode of GPIO
		/*
		 * rank in range 0..16
		*/
		bool setChannel(GPIO_Pin& pin, byte rank = 0, ADCSample::ADCSample sample
		#if defined(_MCU_STM32F1x)
			= ADCSample::HALF_111
		#elif defined(_MCU_STM32F4x)
			= ADCSample::CYCL_144
		#endif
		);
		virtual int inn() {
			return self[ADCReg::DR];
		}
		// Get Value
		ADC_t& operator>> (uint32_t& val) {
			val = inn();
			return self;
		}
		// feedback 0~1
		ADC_t& operator>> (float& val) {
			val = float _IMM(inn()) / _TEMP 4095;//{TODO check the BITS}
			return self;
		}
		//
	#if defined(_MCU_STM32F1x)
		bool isTriggeredBySoftware() const { // ADC1_2_3_SWSTART
			using namespace ADCReg;
			return (self[CR2] & (0x7 << _ADC_CR2_POS_EXTSEL)) == ((stduint)0x7 << _ADC_CR2_POS_EXTSEL);// 0x000E0000
		}
		//{TODO} combinate this and enInterrupt into setMode or enAble
		bool enDMA(pureptr_t addr, stduint leng);


		bool setDMA(bool periph_inc = false, bool memory_inc = false, stduint periph_align = 2 /*byte*/, stduint memory_align = 2 /*byte*/, bool circular_mode = true, byte priority = 1);
	#else //{TEMP}
		
	#endif

	};

	static struct ADC_Global {
		ADC_t& operator[](byte id);
		#ifdef _MCU_STM32F4x
		inline Reference operator[](ADCReg::ADCComType idx) {
			return ADC_t::Reflect(idx);
		}
		#endif
	} ADC;// union with others to save .(ro)data

#endif
}

#endif
