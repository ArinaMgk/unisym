// UTF-8 CPP-ISO11 TAB4 CRLF
// Docutitle: (Device) TIM
// Codifiers: @dosconio: 20240422 ~ <Last-check> 
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

//{TODO} unify C and C++

#ifndef _INCPP_Device_TIM
#define _INCPP_Device_TIM

/* Component
- Advanced 高级定时器 TIM1 TIM8
- Basic    基本定时器 TIM6 TIM7 : 16b-auto-reload-counter
- Common   通用定时器 TIM2 TIM3 TIM4 TIM5 : general-purpose
*/
#include "../unisym"
#include "../binary"
#include "../reference"
#include "../interrupt"
#include "GPIO"
#include "RCC/RCCAddress"

//{TODO} each Channel has fixed address

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)
#undef TIM
#undef TIM1
#undef TIM2
#undef TIM3
#undef TIM4
#undef TIM5
#undef TIM6
#undef TIM7
#undef TIM8

#define _TIM_CR1_POS_CEN   0
#define _TIM_CR1_POS_UDIS  1
#define _TIM_CR1_POS_URS   2
#define _TIM_CR1_POS_OPM   3
#define _TIM_CR1_POS_DIR   4
#define _TIM_CR1_POS_CMS   5
#define _TIM_CR1_POS_ARPE  7
#define _TIM_CR1_POS_CKD   8

#define _TIM_SMCR_POS_MSM 7
#define _TIM_SR_POS_UIE   0

namespace uni {
	extern byte TimCrtChan;
	// Haruno saw most parameters are compatible
	namespace TimReg {
		typedef enum {
			// : control register
			CR1,   // 0x00
			CR2,   // 0x04
			SMCR,  // TIM slave Mode Control register,            0x08
			DIER,  // TIM DMA/interrupt enable register,          0x0C
			SR,    // TIM status register,                        0x10
			EGR,   // TIM event generation register,              0x14
			// : capture/compare mode register
			CCMR1, // 0x18
			CCMR2, // 0x1C
			CCER,  // TIM capture/compare enable register,        0x20
			CNT,   // TIM counter register,                       0x24
			PSC,   // TIM prescaler register,                     0x28
			ARR,   // TIM auto-reload register,                   0x2C
			RCR,   // TIM  repetition counter register,           0x30
			// : capture/compare register
			CCR1,  // 0x34
			CCR2,  // 0x38
			CCR3,  // 0x3C
			CCR4,  // 0x40
			BDTR,  // TIM break and dead-time register,           0x44
			DCR,   // TIM DMA control register,                   0x48
			DMAR,  // TIM DMA address for full transfer register, 0x4C
			OR,    // TIM option register,                        0x50
		} TimRegType;
	}

	namespace TimChinSel { // TIM Channel Input Selection
		typedef enum {// TIM Input 1~4 selected to whom respectively
			Direct = 1, // IC1, IC2, IC3 or IC4
			Indirect = 2, // IC2, IC1, IC4 or IC3
			TRC = 3 // TRC
		} TimChinSel;
	}

	class TIM_CHAN_t;
	class TIM_t : public RuptTrait {
	protected:
		stduint baseaddr;
		byte TIM_ID;
	public:
		Handler_t FUNC_IC_Capture;
		Handler_t FUNC_OC_DelayElapsed;
		Handler_t FUNC_PWMPulseFinished;
		Handler_t FUNC_Break;
		Handler_t FUNC_Trigger;
		Handler_t FUNC_Commute;
		byte last_src;
		TIM_t(stduint baseaddr, byte TIM_ID) : baseaddr(baseaddr), TIM_ID(TIM_ID) {
			FUNC_IC_Capture = 0;
			FUNC_OC_DelayElapsed = 0;
			FUNC_PWMPulseFinished = 0;
			FUNC_Break = 0;
			FUNC_Trigger = 0;
			FUNC_Commute = 0;
			last_src = nil;
		}
		Reference operator[](TimReg::TimRegType trt) {
			return Reference(baseaddr + _IMMx4(trt));
		}
		TIM_CHAN_t operator[](stduint chan_id);
		stduint getBaseaddr() const { return baseaddr; }
		byte getID() const { return TIM_ID; }
		_COM_DEF_Interrupt_Interface();
		void enClock(bool ena = true) {
			if (!TIM_ID) return;
			byte width = 0;
			stduint refaddr = _RCC_APB1ENR_ADDR;
			if (TIM_ID == 1) {
				refaddr = _RCC_APB2ENR_ADDR;
				width = 11;
			}
			else if (Ranglin(TIM_ID, 2, 6)) { // TIM 2~7
				width = TIM_ID - 2;
			}
			else _TODO;
			Reference(refaddr).setof(width, ena);
		}
		void enAble(bool ena = true) {
			using namespace TimReg;
			self[CR1].setof(_TIM_CR1_POS_CEN, ena);
		}
		void ConfigMaster(_TEMP stduint master_output_triggerm = 0, bool master_slave_enable = false);//{TO private}
		bool WantedSource(byte src) {
			return last_src == src;
		}
	};

	extern TIM_t* TIM[];
	class TIM_A;
	class TIM_B;
	class TIM_C;
	
	class TIM_CHAN_t {
		byte TIM_ID, CHAN_ID;
	public:
		TIM_CHAN_t(byte _TIM_ID, byte _CHAN_ID) : TIM_ID(_TIM_ID), CHAN_ID(_CHAN_ID) { }
		bool setMode(stduint compare, GPIO_Pin* pin = nullptr);
		// preset: setMode Parent; default: no-prescaler
		void setMode(TimChinSel::TimChinSel sel, byte presexpo = 0);
		//
		bool GenerateHalfwave(stduint pres, stduint period);
		// preset: after using Generate-Halfwave
		void RenerateHalfwave(stduint period);

		TIM_t* getParent() const { return TIM[TIM_ID]; }
		double getDuty() const;
	};
}
#endif // _MCU_STM32F1x || _MCU_STM32F4x


namespace uni {
#if 0

#elif defined(_MCU_STM32F1x)


//{TODO} stm32f1xx_hal_tim.h/c 
//{TODO} TIM1 TIM2 TIM3 TIM4 TIM5 TIM7 TIM8
//{TODO} TIM[7]

/*TODO
 * TIM_Prescaler
 * TIM_CounterMode       AC
 * TIM_Period
 * TIM_ClockDivision     AC
 * TIM_RepetitionCounter A
*/
/*TODO
  TIM_TypeDef                 *Instance;    Register base address             
  TIM_Base_InitTypeDef        Init;         TIM Time Base required parameters 
  HAL_TIM_ActiveChannel       Channel;      Active channel                    
  DMA_HandleTypeDef           *hdma[7U];    DMA Handlers array
                                            This array is accessed by a @ref TIM_DMA_Handle_index 
  HAL_LockTypeDef             Lock;         Locking object                    
  __IO HAL_TIM_StateTypeDef   State;        TIM operation state               
*/

	class TIM_A;
	
	class TIM_B : public TIM_t {
		
	public:
		TIM_B(stduint baseaddr, byte TIM_ID) : TIM_t(baseaddr, TIM_ID) { }

		// Real Freq: 72M/(prescaler+1)
		void setMode(stduint prescaler = 71, stduint period = 1000, bool auto_reload_preload = false) {
			enClock();
			// TODO uint32 tmpcr1 = TIMx->CR1;
			if (0) { // for A and C
				//tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
				//tmpcr1 |= Structure->CounterMode;
				//
				//tmpcr1 &= ~TIM_CR1_CKD;
				//tmpcr1 |= (uint32_t)Structure->ClockDivision;
			}

			//TODO  tmpcr1 &= ~TIM_CR1_ARPE;
			//TODO  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
			//TODO  TIMx->CR1 = tmpcr1;

			self[TimReg::CR1].setof(_TIM_CR1_POS_ARPE, auto_reload_preload);

			self[TimReg::ARR] = period;
			self[TimReg::PSC] = prescaler;

			if (0) { // for A
				//TIMx->RCR = Structure->RepetitionCounter;
			}
			self[TimReg::EGR] = 1; // TIM_EGR_UG;// Generate an update event to reload the Prescaler and the repetition counter(only for TIM1 and TIM8) value immediatly
		}

		void setPeriod();
		void setPrescaler();
		
	}; // 6 and 7
	extern TIM_B TIM6, TIM7;

	class TIM_C;

#elif defined(_MCU_STM32F4x)

	#define _TIM_CR2_POSI_MMS 4
	
//{TODO} TIM1 TIM7 TIM8
//{TODO} TIM[6] TIM[7]
	//: TIMxCLK = HCLK/2 = 84MHz: TIMFREQ=TIMxCLK/TIMPrescaler=1MHz
	//{TODO} get this from current sysfreq.
	#define _TIMC_DEFA_PRESCALER 84 // 1e-6 second, 168M div APB1Pres(4) mul (2)
	
	#define _TIMC_DEFA_PERIOD    1000000
	

	class TIM_A;
	class TIM_B;
	class TIM_C : public TIM_t {
		// aka HAL_TIM_PWM_ConfigChannel
		void ConfigChannel(byte channel, stduint pulse);
	public:
		TIM_C(stduint baseaddr, byte TIM_ID) : TIM_t(baseaddr, TIM_ID) { }
		//
		void setMode(stduint prescaler = _TIMC_DEFA_PRESCALER, stduint period = _TIMC_DEFA_PERIOD, bool auto_reload_preload = false);

		bool setChannel(byte channel, stduint pulse, GPIO_Pin* pin);

		//{TODO}
		//: PWM (channel in range 1..1+4)
		// aka HAL_TIM_PWM_Start
		void enChannel(byte channel) {
			using namespace TimReg;
			enCaptureCompareChannel(channel);
			if (TIM_ID == 1 || TIM_ID == 8) { // IS_TIM_BREAK_INSTANCE
				self[BDTR] |= 0x00008000; //(TIM_BDTR_MOE)
			}
			if (0x6 != self[SMCR].mask(0, 3)) { // !IS_TIM_SLAVEMODE_TRIGGER_ENABLED
				enAble();
			}
		}

		//aka TIM_CCxChannelCmd
		void enCaptureCompareChannel(byte channel, bool ena = true) {
			using namespace TimReg;
			if (!Ranglin(channel, 1, 4)) return;
			self[CCER].setof(4 * --channel, ena);
		}

		_TEMP void Select(stduint SlaveMode = 0x7, stduint TriggerInn = 0x5, stduint TriggerOut = 0, bool MasterSlaveMode = false);

	};
	extern TIM_C TIM2, TIM3, TIM4, TIM5;


#endif
}

#endif
