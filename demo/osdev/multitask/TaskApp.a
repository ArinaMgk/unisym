; GBK [Doshou Haruno], Kasha Copyright 2023 ArinaMgk Apache License 2.0
; dosconio:dosconyo@gmail.com
;Build RFQ16,17
;	asm TaskApp.a
;	asm TaskSub.a
;	vdk TaskApp.a 1
;	vdk TaskSub.a 50
; Char UTF-8, Derived from Pe32app.a
; Running Chain: TaskApp > TaskSub > TaskApp > TaskSub > TaskApp
%include "osdev.a"
%include "video.a"
%include "debug.a"

%include "hdisk.a"
%include "demos.a"

;---GDT---
;------GDTE 00 NULL
;------GDTE 01 Global Data
;------GDTE 02 Kernel Code
;------GDTE 03 Stack
;------GDTE 04 Video Display Buffer 32K
;------GDTE 05 32PE ROUTINE (GS)
;------GDTE 06 32PE ROUTLST (FS)
;------GDTE 07 R3CALLGATE : PRINT
;------GDTE 08 LDT (subapp)
;------GDTE 09 TSS (subapp)
;------GDTE 0A KernelState
;------GDTE 0B R3CALLGATE : TERMINATE
;---------

STACK_SEG EQU 0x1000
THISF_SEG EQU 0x0100 ;this file
THISF_ADR EQU 0x1000
GDT_SEG   EQU 0x07B0
GDT_ADDR  EQU 0x7B00
SUBPROG_S EQU 50; SECTOR
[BITS 16]
File
DefineStack 0,STACK_SEG

;---GDT make
	MOV AX,GDT_SEG
	MOV DS,AX
	XOR EBX,EBX
	;------GDTE 00 NULL
	GDTDptrAppend 0,0
	;------GDTE 01 Global Data
	; BASE[00000000]LIM[FFFFF][4KB][32][KiSys][DATA][R0][∂¡–¥/∂¡÷¥]
	GDTDptrAppend 0x00CF9200,0x0000FFFF
	;------GDTE 02 Current Code
	; BASE[00001000]LIM[QWERT][Byt][32][KiSys][CODE][R0][÷ª∂¡/÷ª÷¥]; 004Q9800 1000WERT
	PUSH EBX
	MOV EAX,THISF_ADR
	MOV EBX,FILEEND2
	DEC EBX
	MOV ECX,0x00409800
	CALL F_GDTDptrStruct
	POP EBX
	GDTDptrAppend EDX,EAX
	;------GDTE 03 Stack
	GDTDptrAppend 0x00CF9600,0x7B00FFFE
	;------GDTE 04 Video display buffer 32K
	; BASE[000B8000]LIM[07FFF][Byt][32][KiSys][DATA][R0][∂¡–¥/∂¡÷¥]
	GDTDptrAppend 0x0040920B,0x80007FFF
	;------GDTE 05 32PE ROUTINE (GS)
	PUSH EBX
	MOV EAX,THISF_ADR+Routine
	MOV EBX,RoutineEnd-Routine
	DEC EBX
	MOV ECX,0x00409800; 0x00409E00; [Byt][32][KiSys][CODE][R0][∂¡–¥œ¬Õÿ/∂¡÷¥“¿¥”]
	CALL F_GDTDptrStruct
	POP EBX
	GDTDptrAppend EDX,EAX
	;------GDTE 06 32PE ROUTLST (FS)
	PUSH EBX
	MOV EAX,THISF_ADR+rot0000
	MOV EBX,Routine-rot0000
	DEC EBX
	MOV ECX,0x0040F000; [Byt][32][KiSys][DATA][R3][÷ª∂¡/÷ª÷¥]
	CALL F_GDTDptrStruct
	POP EBX
	GDTDptrAppend EDX,EAX
	;------GDTE 07 R3CALLGATE : PRINT
	PUSH EBX
	PUSH DS
	MOV AX,THISF_SEG
	MOV DS,AX
	GateStruct DWORD[rot0001],WORD[rot0001+4],1_11_011000000_0000B; P.DPL.01100000.PARA
	MOV WORD[rot0001+4],8*7+3
	POP DS
	POP EBX
	GDTDptrAppend EDX,EAX

	MOV AX,THISF_SEG
	MOV DS,AX
	MOV [GDTPTR],EBX
	ADD DWORD[GDTPTR],GDT_ADDR
	DEC EBX; Now equal size of GDT
	MOV WORD[DS:GDTable],BX
	LGDT [DS:GDTable]

Addr20Enable
;---Enter Protected Mode
	CLI; prevoius interrupts lost functions
	MOV EAX,CR0
	OR EAX,1
	MOV CR0,EAX

	JMP DWORD 8*2:mainx
	DbgStop
F_GDTDptrStruct:
	GDTDptrStruct EAX,EBX,ECX
	RET
GDTPTR: DD 0;len

[BITS 32];--------------------------------
mainx:
;---Init segment
	MOV EAX,8*1
	MOV DS,EAX
	MOV EAX,8*4
	MOV ES,EAX
	MOV EAX,8*3
	MOV SS,EAX
	MOV ESP,0

;---Load Sub-program
	PUSH DWORD SUBPROG_S
	CALL F_TSSStruct
	MOV ESI,EBX
	OR EBX,EBX
	JZ R_Terminate
	MOV WORD[EBX+256+6H],8*6; FS
	MOV WORD[EBX+88],8*6; FS
	;MOV WORD[EBX+92],8*5; GS
		MOV WORD[EBX+92],0; GS ???

;--- REGISTER LDT08 / TSS09 INTO GDT
	MOV EDI,[THISF_ADR+GDTPTR]

	MOV EAX,ESI
	ADD EAX,104
	XOR EBX,EBX
	MOV BX,[ESI+94]
	MOV ECX,0x00408200; [Byt][32][NaSys][DATA][R0][∂¡–¥/∂¡÷¥]
	CALL F_GDTDptrStruct_32
	MOV EBX,EDI
	GDTDptrAppend EDX,EAX
	MOV WORD[ESI+96],8*8

	PUSH EBX
	MOV EAX,ESI
	MOV EBX,104
	DEC EBX
	MOV ECX,0x00408900; TSS RING0, THE RING IS FOR THE CALLER? --RFQ18
	;00008900 or 00408900 ?
	CALL F_GDTDptrStruct_32
	POP EBX
	GDTDptrAppend EDX,EAX

	MOV DWORD[THISF_ADR+GDTPTR],EBX
	DEC EBX
	SUB EBX,GDT_ADDR
	MOV WORD[DS:THISF_ADR+GDTable],BX
	LGDT [DS:THISF_ADR+GDTable]

;---ROOT TASK
	; CREATE THIS KERNEL TO A TASK, IN ORDER TO MAKE USE OF TSS TO STORE STATE
	MOV EAX,[DS:THISF_ADR+RamAllocPtr]
	ADD DWORD[DS:THISF_ADR+RamAllocPtr],128; IN FANT JUST USE 104
	MOV WORD[EAX],0; ∑¥œÚ¡¥=0
	MOV WORD[EAX+96],0; NO LDT
	MOV WORD[EAX+100],0; T=0 , is what ???
	MOV WORD[EAX+102],103; NO I/O BITMAP
	MOV EBX,104-1
	MOV ECX,0X00408900; R0TSS
	;00008900 or 00408900 ?
	CALL F_GDTDptrStruct_32
	MOV EBX,[THISF_ADR+GDTPTR]
	GDTDptrAppend EDX,EAX

	;------GDTE 0B R3CALLGATE : TERMINATE
	PUSH EBX
	GateStruct DWORD[THISF_ADR+rot0000],WORD[THISF_ADR+rot0000+4],1_11_011000000_0000B; P.DPL.01100000.PARA
	MOV WORD[THISF_ADR+rot0000+4],8*0BH+3
	POP EBX
	GDTDptrAppend EDX,EAX

	MOV DWORD[THISF_ADR+GDTPTR],EBX
	DEC EBX
	SUB EBX,GDT_ADDR
	MOV WORD[DS:THISF_ADR+GDTable],BX
	LGDT [DS:THISF_ADR+GDTable]
	MOV CX,8*0AH
	LTR CX
	;;;;MOV WORD[ESI],CX;;;; ADD THIS? NEED NOT?
;---run subapp
RunShell:
	MOV	ESI,THISF_ADR+WelcomeMsg
	MOV AH,7
	CALL FAR [THISF_ADR+rot0001]; CALL 8*7:0
	
	MOV EAX,$; GET CURRENT POSITION - 0X1000

	;MOV EDX,DWORD[0x7C00+64] ;SUBAPP NO EIP, need not
CALL 8*9:0
	;MOV DWORD[0x7C00+64],EDX;clear state, need not
	;AND BYTE[0x7b00+8*9+8+2],0b1111_1101; not busy, need not

	MOV	ESI,THISF_ADR+WelcomeMsg
	MOV AH,7
	CALL FAR [THISF_ADR+rot0001];CALL 8*7:0
CALL 8*9:0

	MOV	ESI,THISF_ADR+TerminateMsg
	MOV AH,7
	CALL FAR [THISF_ADR+rot0001];CALL 8*7:0
	DbgStop
	NOP
F_GDTDptrStruct_32:
	GDTDptrStruct EAX,EBX,ECX
	RET
F_TSSStruct:
	TSSStruct
	RET 4*1
ESPPTR: DD 0
GDTable:
	DW 0
	DD GDT_ADDR
WelcomeMsg: DB " Hello~ The subapp is loaded and then I will run it by JUMP and CALL.",0x0D,0x0A,0
TerminateMsg: DB ':Demonstration End~',0x0D,0x0A,0
RamAllocPtr: DD 0x7C00
APISymbolTable:; till Routine
	RoutineNo: DW (Routine-rot0000)/4
	rot0000:; Terminate
		DD R_Terminate-Routine
		DW 8*5,0
	rot0001:; PrintString (accept New Line)
		DD R_Print-Routine
		DW 8*5,0
	rot0002:; Malloc
		DD R_Malloc-Routine
		DW 8*5,0
	rot0003:; (waiting for adding)
		DD R_Mfree-Routine
		DW 8*5,0
	rot0004:; DiskReadLBA28
		DD R_DiskReadLBA28-Routine
		DW 8*5,0
;---
Routine:
	R_Terminate:; 00 and other rontine point to here
		PUSHFD
		MOV EDX,[ESP]; default segment : ss
		ADD ESP,4; ~= POP EDX
		; But in bits 16, we cannot use "[sp]" to access stack
		TEST DX,0100_0000_0000_0000B; NT
		JNZ R_Terminate_Nest
			JMP (8*0AH):0; FOR JMP-TASK-SWITCH(NON-NEST)
			RETF
		R_Terminate_Nest:
			IRETD
			RETF

		ALIGN 16
	R_Print:; INPUT=DS:ESI
		PUSH ES
		PUSH EAX
		PUSH EBX
		PUSH EAX	
		MOV EAX,8*4
		MOV ES,EAX
		POP EAX
		Print ESI,AH
		;PrintString ESI,AH,5,~
		POP EBX
		POP EAX
		POP ES
		RETF
		ALIGN 16
	R_Malloc:; ecx=length ret"eax=start"
		PUSH DS
		MOV EAX,8*1
		MOV DS,EAX
		MOV EAX,[DS:THISF_ADR+RamAllocPtr]
		ADD DWORD[DS:THISF_ADR+RamAllocPtr],ECX
		POP DS
		RETF
		ALIGN 16
	R_Mfree:
		; ...
		RETF
		ALIGN 16
	R_DiskReadLBA28:;eax=start, ds:ebx=buffer
		DiskReadLBA28 EAX,1
		RETF
		ALIGN 16
RoutineEnd:
;TEST_LIMIT_OF_SEG: JMP TEST_LIMIT_OF_SEG_BACK
Endf
FILEEND2:
