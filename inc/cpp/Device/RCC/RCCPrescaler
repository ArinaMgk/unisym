// ASCII CPP TAB4 CRLF
// Docutitle: Reset and Clock Control
// Datecheck: 20240416 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_Prescaler_X
#define _INC_DEVICE_RCC_Prescaler_X

#include "../../reference"
#include "RCCAddress"
namespace uni {
	class RCCPrescaler {
		
	};
#ifdef _MCU_STM32F1x


	class RCCAHB : public RCCPrescaler { // HCLK
	public:
		// available [0~8]. For example, if divexpo is 1, the divr 2^1 will be applied.
		bool setMode(uint8 divexpo = 0, bool usingPCLK1 = true, bool usingPCLK2 = true);
	};

	class RCCAPB : public RCCPrescaler { // PCLK 1/2 
	protected:
		stduint PCLK_ID;
	public:
		RCCAPB(stduint PCLK_ID) : PCLK_ID((PCLK_ID - 1) & 1) {
			// PCLK_ID can only be 1 or 2
		}
		//
		bool setMode(uint8 divexpo) {
			Reference Cfgreg(_RCC_CFGR);
			if (divexpo >= 5) return false;
			uint32 bitposi = 8 + PCLK_ID * 3;
			if (divexpo) divexpo = (divexpo - 1) | 0x4;
			Cfgreg = (Cfgreg & ~(uint32)(0x7 << bitposi)) | (divexpo << bitposi);
			return true;
		}

		void enAble(uint8 bitposi) {
			Reference _RCC_APBxENR((PCLK_ID == 1) ?
				_RCC_APB2ENR_ADDR : // 1
				_RCC_APB1ENR_ADDR // 0
				);
			_RCC_APBxENR.setof(bitposi);
		}
	};

#elif defined(_MCU_STM32F4x) || defined(_MCU_STM32H7x) 

	class RCCAHB : public RCCPrescaler { // HCLK
	public:
		//-SEE-ABOVE
		bool setMode
			#if defined(_MCU_STM32F4x)
			(uint8 divexpo = 0, bool usingPCLK1 = true, bool usingPCLK2 = true);
			#elif defined(_MCU_STM32H7x)
			(uint8 divexpo = 0);
			#endif

		
	};

	class RCCAPB : public RCCPrescaler { // PCLK 1/2 
	protected:
		// 0 for APB1
		stduint PCLK_ID;
	public:
		RCCAPB(stduint _PCLK_ID) : PCLK_ID(_PCLK_ID - 1) {
			// PCLK_ID can only be 1 or 2 for F4x
		}
		//
		bool setMode(uint8 divexpo);

		void enAble
		#if defined(_MCU_STM32F4x)
			(uint8 bitposi)
		{
			Reference _RCC_APBxENR((PCLK_ID == 1) ? _RCC_APB2ENR_ADDR : // 1
				_RCC_APB1ENR_ADDR // 0
			);
			_RCC_APBxENR.setof(bitposi);
		}
		#else
			();
		#endif



		
	};

#elif defined(_MPU_STM32MP13)

	enum class AxisSource { HSI, HSE, PLL2, OFF };
	enum class MLAHBSource { HSI, HSE, CSI, PLL3 };

	class AXISS_t : public RCCPrescaler {
	protected:
		// AKA __HAL_RCC_AXISS_SOURCE
		void setSource(AxisSource source) const;
		// AKA __HAL_RCC_AXI_DIV and RCC_FLAG_AXIDIVRDY
		void setDiv(byte divr) const;
	public:
		// AKA__HAL_RCC_GET_AXIS_SOURCE
		AxisSource getSource() const;
		// AKA HAL_RCC_GetAXISSFreq
		stduint getFrequency() const;
		// AKA _RCC_FLAG_AXISSRCRDY
		bool isReady() const;
		// AKA RCC_AXISSConfig
		// default: PLL2 DIV1
		// divexpo: DIV 1~4
		bool setMode(AxisSource source = AxisSource::PLL2, byte divr = 1);

	};

	class MLAHB_t : public RCCPrescaler {
	protected:
		// AKA __HAL_RCC_MLAHB_SOURCE
		void setSource(MLAHBSource source) const;
		// AKA __HAL_RCC_MLAHB_DIV and RCC_FLAG_MLAHBDIVRDY
		void setDiv(byte divexpo) const;
	public:
		// AKA__HAL_RCC_GET_MLAHB_SOURCE
		MLAHBSource getSource() const;
		// AKA _RCC_FLAG_MLAHBSSRCRDY
		bool isReady() const;
		// AKA RCC_MLAHBConfig
		// default: PLL3 DIV1
		// divexpo: 0~7 for DIV{1,2,4,8,16,32,64,128}
		bool setMode(MLAHBSource source = MLAHBSource::PLL3, byte divexpo = 0);
	};
	
	class RCCAPB : public RCCPrescaler {
	public:
		//  1~6
		stduint getID() const { return _IMM(this) & 0b111; }
		// divexpo: 0~4 for DIV{1,2,4,8,16}
		bool setMode(byte divexpo);
	};

#endif
}
#endif
