// ASCII C++ TAB4 CRLF
// Attribute: <ArnCovenant> <Env> <bin^%> <CPU()> [Allocation]
// LastCheck: 
// AllAuthor: @dosconio
// ModuTitle: Nested (Network) Token Node for C++, origin from Anode
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_X_NNODE
#define _INC_X_NNODE

#ifndef _INC_CPP
#define _INC_CPP
#endif

#include "cinc"
#include "../c/alice.h"
#include "cinc"
#include "node"
#include "tnode"

namespace uni {
	class Nnode : public Tnode {
	public:
		Nnode(void* addr = 0, Nnode* n_left = 0, Nnode* n_right = 0) :
			Tnode(addr, 0, (Tnode*)n_left, (Tnode*)n_right, 0, 0),
			addr((char*&)Dnode::offs), left((Nnode*&)Tnode::left), next((Nnode*&)Tnode::next) { subf = 0; bind = 0; }
		Nnode(Tnode* nod) : Tnode(*nod), addr((char*&)Dnode::offs), left((Nnode*&)Tnode::left), next((Nnode*&)Tnode::next) { subf = 0; data = 0; pare = 0; bind = 0; }
		char*&  addr ; // = (char*&)Dnode::offs;
		Nnode*& left; // = (Nnode*&)Tnode::left;
		Nnode*& next; // = (Nnode*&)Tnode::next;
		Nnode*  subf;
		Nnode*  pare;// Want independent version? try Anode(anode.h)
		void*   data;
		void*   bind;
		//
		Nnode* Head() { // of parallel chain
			// return stepval(this->pare)->subf;// assert( while(...->left) )
			if (this->pare) return this->pare->subf; else {
				Nnode* crt = this; while (crt->left && (crt = crt->left));
				return crt;
			}
		}

		Nnode* Tail() { 
			Nnode* crt = this; while (crt->next && (crt = crt->next)); return crt;
		}

		bool isHead(Nnode* ifthen_reset = 0);
		bool difline(Nnode* nod) { return this->row != nod->row; }
		Nnode* ReheapString(const char* str);
	};

	#undef Pref
	#define Pref(x) NNODE_DIVSYM_##x
	enum NNODE_DIVSYM_RETYPE {
		Pref(NONE), Pref(HEAD), Pref(TAIL), Pref(MIDD), Pref(ERRO)
	};
	#undef Pref

	class NnodeChain : public TnodeChain {
	public:
		// INHERI: Count() ...
		NnodeChain(bool need_free);
		~NnodeChain();

		Nnode* Append(const void* addr, stduint typ, stduint col, stduint row);
		Nnode* Append(Tnode* tnode);// from outside of chain

		Nnode* Insert(Nnode* insnod, bool onleft = false, \
			const void* addr = 0, stduint typ = 0);
		Nnode* Insert(Nnode* insnod, Dnode* dnod, bool onleft = false);
		Nnode* Receive(Nnode* insnod, DnodeChain* dnod, bool onleft = false);

		void Sort();

		void Index(void* content);

		// can use by pseudo static (set this zero)
		Nnode* Adopt(Nnode* thisn, Nnode* subhead, Nnode* subtail = (Nnode*)~(stduint)0, bool go_func = true);

		Nnode* Root() { return (Nnode*)root_node; }
		Nnode*& RootAddress() { return root_node; }

		Nnode* Last() { return (Nnode*)last_node; }// of main trunk

		void Remove(const stduint iden);
		void Remove(const void* content);
		Nnode* Remove(Nnode* nod, bool systematic = true) {
			return NnodeRelease(nod, this, systematic);
		}

		void SetFreeContent(bool need_free);

		//[ASSUME] Contents Heaped
		NNODE_DIVSYM_RETYPE DivideSymbols(Nnode* inp, stduint width, stduint idx);
		
	protected:
		Nnode*& root_node; // = (Nnode*&)TnodeChain::root_node;
		Nnode*& last_node; // = (Nnode*&)TnodeChain::last_node;
		//{TODO}
		static Nnode* NnodeRelease(Nnode* nod, NnodeChain* nc, bool systematic = true);
		static void NnodesRelease(Nnode* nods, NnodeChain* nc);
	};

	class NestedParseUnit {
	private:
		NnodeChain* chain;
	public:
		bool parsed;
		/*tofree*/ char* msg_fail;
		stduint linemn_no, column_no;
		NodeChain* TokenOperatorGroupChain;
		NestedParseUnit(TnodeChain& tchain, NodeChain* TOGCChain);// will destructure TnodeChain
		~NestedParseUnit();
		NnodeChain* GetNetwork() { return chain; }
		// Process:
		bool Parse() {
			return NnodeParse(chain->Root(), chain);
		}
	protected:
		bool NnodeParse(Nnode* tnod, NnodeChain* chain, bool merge_parensd = true);
		bool ParseOperator(Nnode* pare, NnodeChain* nc);
	};

	typedef void(*_tok_bindfunc_t)(DnodeChain* io);
	
	struct TokenOperator {
		const char* idnop;
		const char* ident;
		_tok_bindfunc_t bindfn;
	};

	class TokenOperatorGroup {
	public:
		TokenOperator* operators;
		stduint count;
		bool left_to_right;
		stduint condition;// "?:" is ternary conditional operator
		//
		TokenOperatorGroup(TokenOperator* ops, stduint cnt, bool ltr = true, stduint cond = 2) {
			operators = ops; count = cnt; left_to_right = ltr; condition = cond;
		}
	};// usually arranged by levels for its array/chain
}

const char* StrIndexOperator(const char* str, uni::TokenOperator** operators, size_t count, bool left_to_right);

#endif
