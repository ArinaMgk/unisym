// ASCII CPP TAB4 CRLF
// Docutitle: Reset and Clock Control
// Datecheck: 20240416 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_Oscillator_X
#define _INC_DEVICE_RCC_Oscillator_X

#include "../../reference"
#include "RCCClock"
#include "RCCPLL"

extern stduint HSE_VALUE, HSI_VALUE;

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)
namespace uni {
	namespace HSEState {
		enum RCCOscillatorHSEState {
			Disable = 0x00000000,
			Enable = _IMM1 << 16,// "HSEON"
			Bypass = (_IMM1 << 18 | Enable)// External clock source for HSE clock
		};
	}
}
#endif// _MCU_STM32F1x || _MCU_STM32F4x

namespace uni {
#ifdef _MCU_STM32F1x

	class RCCOscillator {
	protected:
		uni::Reference addr;
	public:
		RCCOscillator() : addr() {} 
	};

	class RCCOscillatorHSE : public RCCOscillator {
	protected:
		uint32 predivr;
	public:
		friend class RCCPLL;
		//
		RCCOscillatorHSE() : predivr(1) {}
		// 
		static bool isReady() {
			Reference Conreg(_RCC_CR);
			return Conreg.bitof(_RCC_CR_POSI_HSEReady);
		}
		// return success.
		bool setMode(HSEState::RCCOscillatorHSEState state = HSEState::Enable, uint32 predivr = 1);
	};
	typedef RCCOscillatorHSE HSE_t;

	class RCCOscillatorHSI : public RCCOscillator{
	public:
		// 
		static bool isReady() {
			Reference Conreg(_RCC_CR);
			return Conreg.bitof(_RCC_CR_POSI_HSIReady);
		}
		//HSICalibrationValue
	};
	typedef RCCOscillatorHSI HSI_t;

	class RCCOscillatorLSI : public RCCOscillator{

	};
	typedef RCCOscillatorLSI LSI_t;

	class RCCOscillatorLSE : public RCCOscillator{

	};
	typedef RCCOscillatorLSE LSE_t;

#elif defined(_MCU_STM32F4x)

	class RCCOscillatorHSE //{}: public RCCOscillator
	{
	protected:
	public:
		bool setMode();
		static bool isReady();
	};
	typedef RCCOscillatorHSE HSE_t;

	class RCCOscillatorHSI //{}: public RCCOscillator 
	{
	public:
		// 
		static bool isReady();
		//HSICalibrationValue
	/*{} HSI
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
	*/
	};
	typedef RCCOscillatorHSI HSI_t;
	
#elif defined(_MPU_STM32MP13)

	class RCCOscillatorHSE { //{}: public RCCOscillator
	public:
		// AKA IS_HSE_IN_USE
		bool isUsed() const;
		// AKA RCC_FLAG_HSERDY
		bool isReady() const;
		//
		void enAble(bool ena = true) const;
		// AKA (PARTOF-HAL_RCC_OscConfig) HAL_RCC_HSEConfig
		bool setMode(bool bypass = false, bool byp_dig = false) const;
		// State(OFF), not RESET to default
		bool canMode() const;
		//
		inline stduint getFrequency() const {
			return HSE_VALUE;
		}
	};
	typedef RCCOscillatorHSE HSE_t;
	
	class RCCOscillatorHSI { //{}: public RCCOscillator
		// useless `this`
	protected:
		// AKA __HAL_RCC_HSI_DIV and RCC_FLAG_HSIDIVRDY
		void setDiv(byte div) const;
		// AKA __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
		void AdjectCalibration(stduint calibration) const;
	public:
		// AKA IS_HSI_IN_USE
		bool isUsed() const;
		//
		bool isReady() const;
		//
		void enAble(bool ena = true) const;
		// State(ON)
		// divexpo    : MASK(0b11) 0~3 for DIV 1 2 4 8
		// calibration: 0..0x80
		bool setMode(byte divexpo, byte calibration) const;
		// Reset to default state
		void Reset() const;
		// State(OFF)
		bool canMode() const;
		//
		stduint getFrequency() const;
	};
	typedef RCCOscillatorHSI HSI_t;

	class RCCOscillatorCSI { //: public RCCOscillator {
	protected:
		// AKA __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST
		void AdjectCalibration(stduint calibration) const;
	public:
		// AKA IS_CSI_IN_USE
		bool isUsed() const;
		//
		bool isReady() const;
		// AKA __HAL_RCC_CSI_ENABLE/DISABLE
		void enAble(bool ena = true) const;
		// State(ON)
		// calibration: 0..0x20
		bool setMode(byte calibration) const;
		// State(OFF)
		bool canMode() const;
	};
	typedef RCCOscillatorCSI CSI_t;
	
	class RCCOscillatorLSI { //: public RCCOscillator {
	public:
		// AKA RCC_FLAG_LSIRDY
		bool isReady() const;
		// AKA __HAL_RCC_LSI_ENABLE / _DISABLE
		void enAble(bool ena = true) const;
		// State(ON)
		bool setMode() const;
		// State(OFF)
		bool canMode() const;
	};
	typedef RCCOscillatorLSI LSI_t;

	class RCCOscillatorLSE { //: public RCCOscillator {
	public:
		// AKA 
		bool isReady() const;
		//
		void enAble(bool ena = true) const;
		// AKA PWR{SET}+HAL_RCC_LSEConfig
		bool setMode(bool bypass = false, bool byp_dig = false) const;
		// State(OFF), not RESET to default
		bool canMode() const;
	};
	typedef RCCOscillatorLSE LSE_t;

#endif
}
#endif
