// ASCII CPP TAB4 CRLF
// Docutitle: (Device) General Purpose Input Output
// Codifiers: @dosconio: 20240412
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_GPIO_X
#define _INC_DEVICE_GPIO_X

#include "../unisym"
#if defined(_SUPPORT_GPIO)

#include "../binary"
#include "../reference"
#include "../interrupt"
#include "../../c/uctype.h"

// [MAP] 20241017 dosconio virtual-pin-softmap
// Offset 0001_000x ~ 0001_00Ax -> Port 0~10
// Offset 0001_00x0 ~ 0001_00xF -> Pin  0~15
// 0x0000_0BAD for failure

#define SelfGpin const GeneralPurposeInputOutputPin&
#define SelfGpor const GeneralPurposeInputOutputPort&
	

// 00000000 maybe a valid address of someone
// These are of Harunono Style, and the design have not be used by enough users!
// 202404112300: I tried use std::bind(), C++11 in ARMCC-v6, but it make MCU did not work! So do not use Property STYLE!

#undef GPIO

#define gpo(x) GPIO##x
namespace uni {
	//! enum can be like namespace is since C++11

	class GeneralPurposeInputOutputPin;
	class GeneralPurposeInputOutputPort;

#if defined(_MCU_STM32F1x)
	enum class GPIOReg {
		CRL = 0, CRH,
		IDR, ODR, BSRR, BRR, LCKR
	};
#elif defined(_MCU_STM32F4x) || defined(_MPU_STM32MP13)
	enum class GPIOReg {
		MODER = 0, OTYPER, SPEED, PULLS /*aka PUPDR*/,
		IDR, ODR, BSRR, LCKR,
		AFRL, AFRH
	#if defined(_MPU_STM32MP13)
		,
		BRR = 0x28 / 4,
		// ...
		SECCFGR = 0x30 / 4,
		// ...
		HWCFGR10 = 0x3C8 / 4, HWCFGR09, HWCFGR08,
		HWCFGR07, HWCFGR06, HWCFGR05, HWCFGR04,
		HWCFGR03, HWCFGR02, HWCFGR01, HWCFGR00,
		VERR, IPIDR, SIDR
	#endif
	};
#endif

#if defined(_MCU_STM32F1x)
//{TODO} comb with below
	enum class GPIOMode {
		OUT_PushPull = 0 << 2,
		OUT_OpenDrain = 1 << 2,
		OUT_AF_PushPull = 2 << 2,
		OUT_AF_OpenDrain = 3 << 2,
		IN_Analog = 1 + (0 << 2),
		IN_Floating = 1 + (1 << 2), // default state
		IN_Pull = 1 + (2 << 2),
		IN_KEPT = 1 + (3 << 2)
	};
#elif defined(_MCU_STM32F4x) || defined(_MPU_STM32MP13)
	//{TODO} comb with this of F1
	enum class GPIOMode {
		// 20240502{TEMP} use [MODER[1:0],OTYPTR[i]] 3-bits to decide
		OUT_PushPull = 0x2,    //010 with P-up P-dn capability
		OUT_OpenDrain = 0x3,   //011 with P-up P-dn capability
		OUT_AF_PushPull = 0x4, //100 Alternate Function PP with P-up P-dn capability
		OUT_AF_OpenDrain = 0x5,//101 Alternate Function OD with P-up P-dn capability
		IN_Analog = 0x6,   //11x
		IN_Floating = 0x0, //00x default state
		IN_Pull = 0x1,     //00x, LSB means not non-pull
		INN = IN_Floating,
		OUT = OUT_PushPull,
	};
#elif defined(_MCU_CW32F030)
	enum class GPIOMode {
		IN = 0x01,          // DIR(1) OPENDRAIN(x)
		OUT_PushPull = 0x02,// DIR(0) OPENDRAIN(0)
		OUT_OpenDrain = 0x03// DIR(0) OPENDRAIN(1)
	};// Bit0(DIR) Bit1(OPENDRAIN)
#elif defined(_MCU_MSP432P4)
	enum class GPIOMode {
		IN, OUT_PushPull, OUT_OpenDrain
	};//{TODO}
#endif

#if defined(_MCU_STM32F1x)
#define defa_speed GPIOSpeed::Atmost_2MHz
	enum class GPIOSpeed {
		Atmost_Input = 0, Atmost_10MHz, Atmost_2MHz, Atmost_50MHz
	};
#elif defined(_MCU_STM32F4x) || defined(_MPU_STM32MP13)
#define defa_speed GPIOSpeed::Medium
	enum class GPIOSpeed {
		Low = 0, Medium, High, Veryhigh,
	};
#elif defined(_MCU_CW32F030)
	enum class GPIOSpeed {
		Low = 0, High
	};
#endif

	#undef GPIO_Pin
	#undef GPIO_Port
	#define GPIO_Pin GPIN
	typedef const GeneralPurposeInputOutputPin GPIN;
	#define GPIO_Port GPORT
	typedef const GeneralPurposeInputOutputPort GPORT;

#if defined(_MCU_STM32)
#include "../../c/driver/GPIO/GPIO_STM32.hpp"
#elif defined(_MCU_CW32F030)
#include "../../c/driver/GPIO/GPIO_CW32x.hpp"
#elif defined(_MCU_MSP432P4)
#include "../../c/driver/GPIO/GPIO_MSP432.hpp"
#endif
	
	// Abstract Layer, should take no space. We use const to confirm, which is friendly to Rust.
	class GeneralPurposeInputOutputPin final : public RuptTrait {
	public:
		inline SelfGpor getParent() const { return treat<GPIO_Port>(_IMM(this) & ~_IMM(0xF)); }\
			inline byte getID() const { return _IMM(this) & 0xF; }
		SelfGpin operator=(bool val) const;
		SelfGpin operator=(SelfGpin pin) const { return self = bool(pin); }
		operator bool() const;
		SelfGpin setMode(GPIOMode mod, GPIOSpeed spd = defa_speed, bool autoEnClk = true) const;
		void setPull(bool pull_up) const;
		void Toggle() const;
		void Lock(bool tolock_orunlock = true) const;
		bool isInput() const;
		_COM_DEF_Interrupt_Interface();
	#if defined(_MCU_STM32) // F1 F4 MP13
		//
		const GeneralPurposeInputOutputPin& setMode(GPIORupt::RuptEdge edg, Handler_t f = 0) const;// must in input mode
		//
		const GeneralPurposeInputOutputPin& setMode(GPIOEvent::EventEdge edg) const;// must in input mode
		//{} setConnect(...)
		//! AFRx Register should be set by other device.
	#endif
	#if defined(_MCU_STM32F4x) || defined(_MPU_STM32MP13)
		bool _set_alternate(byte selection) const;
	#endif
	};

	class GeneralPurposeInputOutputPort {
	public:
		stduint getID() const { return (_IMM(this) & 0xF0) >> 4; }
		void enClock(bool enable = true) const;
		operator stduint() const;
		SelfGpin operator[](int pinid) const { return treat<GPIO_Pin>((_IMM(this) & 0xF0) + (pinid & 0xF)); }
		SelfGpor operator=(SelfGpor pot) const { return self = stduint(pot); }
		SelfGpor operator=(stduint val) const;
	#if defined(_MCU_MSP432P4)
		Reference_T<byte> operator[](GPIOReg8::GPIOReg8 trt) const;
	#else
		Reference operator[](GPIOReg trt) const;
	#endif
	};

	struct GeneralPurposeInputOutput {
		SelfGpor operator[](unsigned portid) const;
	};
	extern GeneralPurposeInputOutput GPIO;

}


#define GPIOA GPIO['A']
#define GPIOB GPIO['B']
#define GPIOC GPIO['C']

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x) || defined(_MCU_MSP432P4) || defined(_MPU_STM32MP13)
#define GPIOD GPIO['D']
#define GPIOE GPIO['E']
#endif

#define GPIOF GPIO['F']

#if defined(_MCU_STM32F4x) || defined(_MPU_STM32MP13)
#define GPIOG GPIO['G']
#define GPIOH GPIO['H']
#define GPIOI GPIO['I']
#endif

#if defined(_MCU_MSP432P4)
#define GPIOJ GPIO['J']
#endif


#endif // _SUPPORT_GPIO
#endif // !_INC_DEVICE_GPIO_X
