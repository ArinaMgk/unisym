// ASCII CPP TAB4 CRLF
// Docutitle: Reset and Clock Control
// Datecheck: 20240416 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_Clock_X
#define _INC_DEVICE_RCC_Clock_X

#include "../../reference"
#include "RCCAddress"
	#undef RTC
	#undef ADC
	#undef I2S2
	#undef I2S3
	#undef USB
	
namespace uni {

	namespace SysclkSource {
		enum RCCSysclockSource {
		#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x) 
		// wo RCC_CFGR_SWS_xxx
			HSI = 0x00000000, // 0b0000
			HSE = 0x00000004, // 0b0100
			PLL = 0x00000008, // 0b1000
		#elif defined(_MPU_STM32MP13)
			HSI,
			HSE,
			PLL1,
			MPUDIV, //= HSE | PLL1
		#else
			Unknown
		#endif
		};
	}

#ifdef _MCU_STM32F1x


	namespace RCCPeriph {
		enum RCCPeriphClockSelection {
			RTC = 0,
			ADC = 1,
			I2S2 = 2,// only-for F10: 1xE 1xG 3xE 3xG 5xC 7xC
			I2S3 = 3,// only-for F10: 1xE 1xG 3xE 3xG 5xC 7xC
			USB = 4,// only-for F10: 2x6 2xB 3x6 3xB 3xE 3xG 5xC 7xC
		};// store the bitposi
	}



	class RCCSystemClock {
		// source
	protected:
		SysclkSource::RCCSysclockSource getSource() {
			Reference Cfgreg(_RCC_CFGR);
			return (SysclkSource::RCCSysclockSource)(Cfgreg & _RCC_CFGR_MASK_SCLKSWSource);
		}
		void setSource(SysclkSource::RCCSysclockSource source) {
			Reference Cfgreg(_RCC_CFGR);
			Cfgreg = (Cfgreg & ~_RCC_CFGR_MASK_Switch) | ((_IMM(source) << _RCC_CFGR_POSI_Switch) >> 2);
		}
	public:
		RCCSystemClock() {

		}
		static SysclkSource::RCCSysclockSource CurrentSource();
		bool setMode(SysclkSource::RCCSysclockSource source = SysclkSource::PLL);
		// SYSCLK
		stduint getFrequency();
		// get and update SystemCoreClock
		stduint getCoreFrequency();
	};
	
	#define _RCC_CFGR_POS_ADCPRE 14U // len 2b
	#define _RCC_CFGR_MASK_ADCPRE (3U<<_RCC_CFGR_POS_ADCPRE)
	class RCCPeriphClock {
	public:
		
		// return success
		static bool ConfigADC(byte divby = 6) {
			// check pre-divider
			if (!divby || isodd(divby) || (divby >> 1) > 4)
				return false;
			Reference Cfgreg(_RCC_CFGR);
			Cfgreg = (Cfgreg & ~_RCC_CFGR_MASK_ADCPRE) | (((_IMM(divby) >> 1) - 1) << _RCC_CFGR_POS_ADCPRE);
			return true;
		}

		/*TEMP*/ void Config(RCCPeriph::RCCPeriphClockSelection perif) {
		//{} uint32_t tickstart = 0U, temp_reg = 0U;
			#if defined(_MCU_STM32F105xC) || defined(_MCU_STM32F107xC)
			uint32_t  pllactive = 0U;
			#endif
			// RTC/LCD Configuration
			if (perif == RCCPeriph::RTC) {
				/*
				FlagStatus pwrclkchanged = RESET;
				// As soon as function is called to change RTC clock source, activation of the power domain is done. Requires to enable write access to Backup Domain of necessary 
				if(__HAL_RCC_PWR_IS_CLK_DISABLED())
				{
				__HAL_RCC_PWR_CLK_ENABLE();
				pwrclkchanged = SET;
				}
				
				if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
				{
				
				SET_BIT(PWR->CR, PWR_CR_DBP);// Enable write access to Backup domain
				tickstart = HAL_GetTick();// Wait for Backup domain Write protection disable
				
				while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
					if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) return HAL_TIMEOUT;
				}
				temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL); // Reset the Backup domain only if the RTC Clock source selection is modified from reset value
				if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
				{
					temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL)); // Store the content of BDCR register before the reset of Backup Domain
				// RTC Clock selection can be changed only if the Backup Domain is reset
				__HAL_RCC_BACKUPRESET_FORCE();
				__HAL_RCC_BACKUPRESET_RELEASE();
				RCC->BDCR = temp_reg; // Restore the Content of BDCR register

				// Wait for LSERDY if LSE was enabled
				if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
				{
					tickstart = HAL_GetTick();
					while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
						if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) return HAL_TIMEOUT;
				}
				}
				__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 

				// Require to disable power clock if necessary
				if(pwrclkchanged == SET)
					__HAL_RCC_PWR_CLK_DISABLE();
				*/
			}
			//{MORE}
		}
	};
	//class RCCHCLK {
	//class RCCPCLK {

#elif defined(_MCU_STM32F4x)

	class RCCSystemClock {
	protected:
		SysclkSource::RCCSysclockSource getSource();
		void setSource(SysclkSource::RCCSysclockSource source);
	public:
		RCCSystemClock() { }
		_TEMP static SysclkSource::RCCSysclockSource CurrentSource();
		bool setMode(SysclkSource::RCCSysclockSource source = SysclkSource::PLL);
		// SYSCLK
		stduint getFrequency();//aka HAL_RCC_GetSysClockFreq
		// get and update SystemCoreClock
		stduint getCoreFrequency();
	};

#elif defined(_MPU_STM32MP13)

	class RCCSystemClock {
	protected:
		// AKA __HAL_RCC_MPU_DIV
		void setDiv(byte divexpo);
		// AKA __HAL_RCC_MPU_SOURCE
		void setSource(SysclkSource::RCCSysclockSource source);
	public:
		// aka MPUSRCRDY
		static bool isReady();
		// aka __HAL_RCC_GET_MPU_SOURCE
		static SysclkSource::RCCSysclockSource CurrentSource();
		// get and update SystemCoreClock
		// aka HAL_RCC_GetSystemCoreClockFreq and HAL_RCC_GetMPUSSFreq
		stduint getCoreFrequency();
		// AKA RCC_CLOCKTYPE_MPU & RCC_MPUConfig
		// default: PLL1 DIV2
		// divexpo: 0~4 for DIV {1,2,4,8,16} for MPUDIV
		bool setMode(SysclkSource::RCCSysclockSource source = SysclkSource::PLL1, byte divexpo = 1);
	};

#endif
}
#endif
