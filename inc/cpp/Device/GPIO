// ASCII CPP TAB4 CRLF
// Docutitle: (Device) General Purpose Input Output
// Codifiers: @dosconio: 20240412
// Attribute: Arn-Covenant Any-Architect Env-Freestanding Non-Dependence
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_GPIO_X
#define _INC_DEVICE_GPIO_X

#include "../unisym"
#include "../binary"
#include "../reference"
#include "../interrupt"

extern "C" {
#include "../../c/uctype.h"
}

/* TODO
[ ] pin=double(X'DP Output)
[ ] pin=int(check digital or analog output)

*/

#if !(_typedest_len==4 && _typeaddr_len==4)
#error "! You may need add optional macro `_MCU_STM32F103VE` or include `STM32F103VEx`"
#endif

#define _COM_DEF_GPIO_Pin_Protected()\
	protected:\
		GeneralPurposeInputOutputPort* parent;\
		uint32 bitposi;\
		bool innput;//{TODEL}

#define _COM_DEF_GPIO_Pin_Public(defa_speed)\
	GeneralPurposeInputOutputPort& getParent() const;\
	inline byte getID() const { return bitposi; }\
	void setMode(GPIOMode::Mode mod, GPIOSpeed::Speed spd = defa_speed, bool autoEnClk = true);\
	void Toggle();\
	GeneralPurposeInputOutputPin& operator=(bool val);\
	GeneralPurposeInputOutputPin& operator=(const GeneralPurposeInputOutputPin& pin);\
	operator bool() const;\
	pureptr_t getAddress() const { return (pureptr_t)this; }\


#define _COM_DEF_GPIO_Port_Public()\
	GeneralPurposeInputOutputPort& operator=(const GeneralPurposeInputOutputPort& pot);\
	operator stduint() const;

// 00000000 maybe a valid address of someone
// These are of Harunono Style, and the design have not be used by enough users!
// 202404112300: I tried use std::bind(), C++11 in ARMCC-v6, but it make MCU did not work! So do not use Property STYLE!

#undef GPIO
#undef GPIOA
#undef GPIOB
#undef GPIOC
#undef GPIOD
#undef GPIOE
#undef GPIOF
#undef GPIOG
#undef GPIOH
#undef GPIOI

#define gpo(x) GPIO##x
namespace uni {
	//! enum can be like namespace is since C++11

	class GeneralPurposeInputOutputPin;
	class GeneralPurposeInputOutputPort;

	#if defined(_MCU_STM32F10x)
		// compatible with `stm32f1xx_hal_gpio.h/c`
	namespace GPIOMode {
		enum Mode {
			OUT_PushPull = 0 << 2,
			OUT_OpenDrain = 1 << 2,
			OUT_AF_PushPull = 2 << 2,
			OUT_AF_OpenDrain = 3 << 2,
			IN_Analog = 1 + (0 << 2),
			IN_Floating = 1 + (1 << 2), // default state
			IN_Pull = 1 + (2 << 2),
			IN_KEPT = 1 + (3 << 2)
		};
	}
	namespace GPIOSpeed {
		enum Speed {
			Atmost_Input = 0,
			Atmost_10MHz = 1,
			Atmost_2MHz = 2,
			Atmost_50MHz = 3,
		};
	}


	//
	class GeneralPurposeInputOutputPin {
		_COM_DEF_GPIO_Pin_Protected()
	public:
		GeneralPurposeInputOutputPin(GeneralPurposeInputOutputPort* parent = 0, uint32 bitposi = 0) : parent(parent), bitposi(bitposi), innput(true) {}
		bool getInn();
		_COM_DEF_GPIO_Pin_Public(GPIOSpeed::Atmost_2MHz)
		void setMode(GPIORupt::RuptEdge edg);// must in input mode
		void setMode(GPIOEvent::EventEdge edg);// must in input mode
		void setPull(bool pullup);
		void setInterrupt(Handler_t fn);
		void setInterruptPriority(byte preempt, byte sub_priority);
		void enInterrupt(bool enable = true);
		bool isInput() const;
		void Lock(bool tolock_orunlock = true);
	};

	class GeneralPurposeInputOutputPort {
		GeneralPurposeInputOutputPin OutpdPins[16];// 32[High-16:kept]
		GeneralPurposeInputOutputPin ERR;
		uint32 EnablPosi;// of ClockPort
	public:
		Reference ClockPort;
		Reference CnrglPort;// Control Register Low, default 0x44444444 _MCU_STM32F10x
		Reference CnrghPort;// Control Register High, default 0x44444444 _MCU_STM32F10x
		Reference InnpdPort;// Input Data Register, default 0x0000XXXX _MCU_STM32F10x
		Reference OutpdPort;// Output Data Register, default 0x00000000 _MCU_STM32F10x
		stduint base;// may used in other library: `HAL_GPIO_Init((GPIO_TypeDef *)uni::GPIOA.base, &GPIO_InitStructure); `
		GeneralPurposeInputOutputPort(uint32 ADDR, uint32 CLK, uint32 Enap = 0);
		void enClock(bool enable = true) {
			BitSet(ClockPort, EnablPosi);
		}
		GeneralPurposeInputOutputPin& operator[](uint8 pinid);

		GeneralPurposeInputOutputPort& operator=(uint32 val);
		_COM_DEF_GPIO_Port_Public()
	};


	extern GeneralPurposeInputOutputPort GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG;
// ---- ---- ---- ---- ---- ---- ---- ----
	#elif defined(_MCU_STM32F4x)
	namespace GPIOMode {
		enum Mode {
			// 20240502{TEMP} use [MODER[1:0],OTYPTR[i]] 3-bits to decide
			OUT_PushPull = 0x2,    //010 with P-up P-dn capability
			OUT_OpenDrain = 0x3,   //011 with P-up P-dn capability
			OUT_AF_PushPull = 0x4, //100 Alternate Function PP with P-up P-dn capability
			OUT_AF_OpenDrain = 0x5,//101 Alternate Function OD with P-up P-dn capability
			IN_Analog = 0x6,   //11x
			IN_Floating = 0x0, //00x default state
			IN_Pull = 0x1,     //00x, LSB means not non-pull
			IN_KEPT
		};
	}
	namespace GPIOSpeed {
		enum Speed {
			Atmost_Low = 0,
			Atmost_Medium = 1,
			Atmost_High = 2,
			Atmost_Veryhigh = 3,
		};
	}
	namespace GPIOReg {
		typedef enum {
			MODER = 0, OTYPER, OSPEEDR, PUPDR,
			IDR, ODR, BSRR, LCKR,
			AFRL, AFRH
		} GPIOReg;
	}

	class GeneralPurposeInputOutputPin {
		_COM_DEF_GPIO_Pin_Protected()
	public:
		GeneralPurposeInputOutputPin(GeneralPurposeInputOutputPort* parent = 0, uint32 bitposi = 0) : parent(parent), bitposi(bitposi), innput(true) {}
		bool getInn();
		void setMode(GPIORupt::RuptEdge edg);// must in input mode
		void setMode(GPIOEvent::EventEdge edg);// must in input mode
		void setPull(bool pullup);
		void setInterrupt(Handler_t fn);
		void setInterruptPriority(byte preempt, byte sub_priority);
		void enInterrupt(bool enable = true);
		bool isInput() const;
		
		
		//{TODO} interrupt-series

		//! AFRx Register should be set by other device.
		void _set_alternate(byte selection);
		
		_COM_DEF_GPIO_Pin_Public(GPIOSpeed::Atmost_Low)
	};

	class GeneralPurposeInputOutputPort {
		stduint baseaddr;
		GeneralPurposeInputOutputPin OutpdPins[16];
		GeneralPurposeInputOutputPin ERR;
		uint32 EnablPosi;// of ClockPort
	public:
		Reference ClockPort;
		Reference InnpdPort;
		Reference OutpdPort;
		//{TODEL}
		Reference ModerPort;
		Reference OtypePort;// OTYPER
		Reference SpeedPort;// OSPEEDR
		Reference PullsPort;// PUPDR
		//
		GeneralPurposeInputOutputPort(uint32 ADDR, uint32 CLK, uint32 Enap = 0);
		void enClock(bool enable = true) {
			BitSet(ClockPort, EnablPosi);
		}
		GeneralPurposeInputOutputPin& operator[](uint8 pinid);
		Reference operator[](GPIOReg::GPIOReg trt) {
			return Reference(baseaddr + (((stduint)trt) << 2));
		}

		GeneralPurposeInputOutputPort& operator=(uint32 val);

		_COM_DEF_GPIO_Port_Public()
	};

	extern GeneralPurposeInputOutputPort GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG;
	extern GeneralPurposeInputOutputPort GPIOH, GPIOI;

	#elif defined(_MCU_CW32F030)
	#include "../../c/driver/GPIO/GPIO_CW32x.hpp"
	#elif defined(_MCU_MSP432)
	#include "../../c/driver/GPIO/GPIO_MSP432.hpp"
	#endif// _MCU_STM32F10x

	struct GeneralPurposeInputOutput {
		GeneralPurposeInputOutputPort ERR;
		GeneralPurposeInputOutput() : ERR(~0, ~0, ~0) { }
		GeneralPurposeInputOutputPort& operator[](char portid);
		stduint Index(const GeneralPurposeInputOutputPort* port);
	};
	extern GeneralPurposeInputOutput GPIO;

	#undef GPIO_Pin
	#undef GPIO_Port
	typedef GeneralPurposeInputOutputPin GPIO_Pin;
	typedef GeneralPurposeInputOutputPort GPIO_Port;
}



#endif // !_INC_DEVICE_GPIO_X
