// ASCII CPP TAB4 CRLF
// Docutitle: Reset and Clock Control
// Datecheck: 20240416 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_Oscillator_X
#define _INC_DEVICE_RCC_Oscillator_X

#include "../../reference"
#include "RCCClock"
#include "RCCPLL"

#if defined(_MCU_STM32F1x) || defined(_MCU_STM32F4x)
namespace uni {
	namespace HSEState {
		enum RCCOscillatorHSEState {
			Disable = 0x00000000,
			Enable = (uint32)1 << 16,// "HSEON"
			Bypass = ((uint32)1 << 18 | Enable),// External clock source for HSE clock
		};
	}
}
#endif// _MCU_STM32F1x || _MCU_STM32F4x

#ifdef _MCU_STM32F1x

namespace uni {
	class RCCOscillator {
	protected:
		uni::Reference addr;
	public:
		RCCOscillator() : addr(0) {} 
	};

	class RCCOscillatorHSE : public RCCOscillator {
	protected:
		uint32 predivr;
	public:
		friend class RCCPLL;
		//
		RCCOscillatorHSE() : predivr(1) {}
		// 
		static bool isReady() {
			Reference Conreg(_RCC_CR);
			return Conreg.bitof(_RCC_CR_POSI_HSEReady);
		}
		// return success.
		bool setMode(HSEState::RCCOscillatorHSEState state = HSEState::Enable, uint32 predivr = 1) {
			if ((RCCSystemClock::CurrentSource() == SysclkSource::HSE) || \
				(RCCSystemClock::CurrentSource() == SysclkSource::PLL) && \
				(RCCPLL::CurrentSource() == PLLSource::HSE)) { // Condition of disable
				//{TODO} Cancel Sysclock: if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
				return false;// it is being used
				//if (!Reference(_RCC_CR).bitof(_RCC_CR_POSI_HSEReady))
				//	return false;
			}
			else {
				Reference Ctrlreg(_RCC_CR);
				Ctrlreg &=~ HSEState::Bypass;
				switch (state) {
				case HSEState::Enable:
					Ctrlreg |= HSEState::Enable;
					break;
				case HSEState::Bypass:
					Ctrlreg |= HSEState::Bypass;
					break;
				default:
				case HSEState::Disable:
					break;
				}
				//
				while (!isReady());//{tofix}
				//{TODO} Check the HSE State by ticks
				//{TODO} Tick Delay
				this->predivr = predivr;
				return true;
			}
		}
	};
	typedef RCCOscillatorHSE HSE_t;

	class RCCOscillatorHSI : public RCCOscillator{
	public:
		// 
		static bool isReady() {
			Reference Conreg(_RCC_CR);
			return Conreg.bitof(_RCC_CR_POSI_HSIReady);
		}
		//HSICalibrationValue
	};
	typedef RCCOscillatorHSI HSI_t;

	class RCCOscillatorLSI : public RCCOscillator{

	};
	typedef RCCOscillatorLSI LSI_t;

	class RCCOscillatorLSE : public RCCOscillator{

	};
	typedef RCCOscillatorLSE LSE_t;

	class RCCOscillatorPLL : public RCCOscillator{

	};
	typedef RCCOscillatorPLL PLL_t;
	
}

#elif defined(_MCU_STM32F4x)
namespace uni {
	class RCCOscillatorHSE //{}: public RCCOscillator
	{
	protected:
	public:
		bool setMode();
		static bool isReady();
	};
	typedef RCCOscillatorHSE HSE_t;

	class RCCOscillatorHSI //{}: public RCCOscillator 
	{
	public:
		// 
		static bool isReady();
		//HSICalibrationValue
	/*{} HSI
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 16;
	*/
	};
	typedef RCCOscillatorHSI HSI_t;
	
}


#endif
#endif
