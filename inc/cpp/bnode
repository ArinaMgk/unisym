// ASCII CPP TAB4 CRLF
// Docutitle: Binary Tree Node Chain, not Token-Node-Chain!
// Datecheck: 20240416 ~ 20240421
// Developer: @dosconio @ UNISYM
// Attribute: [Allocate]
// Reference: None
// Dependens: None
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#if !defined(_INC__BITS__Node_X)
#define _INC__BITS__Node_X

#include "unisym"
#include "dnode"
#include "math.h"

/* TODO
[ ] Index according to complete binary tree
[ ] Combinate with NnodeChain
*/

namespace uni {
	class Bnode : public Dnode {
	public:
		Bnode*& left;
		Bnode*& next;
		Bnode() : left((Bnode*&)Dnode::left), next((Bnode*&)Dnode::next) {
			next = (nullptr);
			offs = (nullptr);
			left = (nullptr);
			type = (0);
		}
		template <typename type0> Bnode(const type0& cont) : Bnode() {
			offs = new type0(cont);
		}
		~Bnode() {
		}

		void Append(pureptr_t off, bool onleft = false) {
			((onleft ? left : next) = new Bnode())->offs = off;
		}
		template <typename type0> void Append(const type0& cont, bool onleft = false) {
			(onleft ? left : next) = new Bnode(cont);
		}
		void Append(pureptr_t offlef, pureptr_t offnex) {
			Append(offlef, true);
			Append(offnex, false);
		}
		template <typename type0> void Append(const type0& a, const type0& b) {
			// Append(new type0(a), new type0(b));//{CAUSE} C1202 in MSVC
			Append(a, true);
			Append(b, false);
		}

		void Swap(Bnode& other) {
			xchgptr(left, other.left);
			xchgptr(next, other.next);
		}
		template <typename type0> type0& getContent() {
			type0* cont = (type0*)this->offs;
			if (nullptr == cont) throw nullptr;// !!!
			return *cont;
		}
	};

	// parallel with `dnode`
	class BnodeChain : public Bnode {
	private:
		//
	protected:
		//{} stduint node_count;
		Bnode* root_node;
		//{} Bnode* last_node;//{Optional}
	public:
		bool address_mode;
		bool available;
		BnodeChain(void* cont = nullptr) : /* node_count(0),*/ root_node(this), /* last_node(nullptr),*/ Bnode::Bnode(), address_mode(false) { 
			offs = cont; 
			available = true;
		}
		template <typename type0> BnodeChain(const type0& cont) : BnodeChain() {
			offs = new type0(cont);
		}
		~BnodeChain() {
			if (available)
				Remove(Root());
		}

		enum TraversalOrder {
			Preorder,
			Inorder,
			Postorder,
		};
		//
		template <typename type0> void Remove(Bnode* item = (Bnode*)None) {
			nulrecurs(item, Root(), );
			Remove<type0>(item->left); //delete left;
			Remove<type0>(item->next); //delete left;
			item->left = item->next = nullptr;
			if (address_mode);
			else delete (type0*)item->offs;// {TODO} self-def func, from Nnode
			if (root_node != item) mfree(item);
			else available = false;
		}
		void Remove(Bnode* item = (Bnode*)None) {
			nulrecurs(item, Root(), );
			Remove(item->left); //delete left;
			Remove(item->next); //delete left;
			item->left = item->next = nullptr;
			if (address_mode);
			else mfree(item->offs);// {TODO} self-def func, from Nnode
			if (root_node != item) mfree(item);
			else available = false;
		}
		//
		Bnode* Root() { return this; }
		//{} stduint Count() { return node_count; }

		// just print them on stdio
		// - procfunc return whether to continue
		void Traversal(TraversalOrder order = Preorder, bool (*procfunc)(Bnode*) = 0, Bnode* starter = (Bnode*)None);
		//
		stduint Leaves(Bnode* starter = (Bnode*)None);
		//
		stduint Depth(Bnode* starter = (Bnode*)None);
		// Swap left and its right for each
		void Mirror(Bnode* from = (Bnode*)None) {
			nulrecurs(from, Root(),);
			Mirror(from->left);
			Mirror(from->next);
			xchgptr(from->left, from->next);
		}
		//
		stduint Count(Bnode* from = (Bnode*)None) {
			if (!from) return 0;
			else if (!~(stduint)from) from = Root();
			if (nullptr == from->left && nullptr == from->next) return 1;
			else return Count(from->left) + Count(from->next) + 1;
		}
		//
		bool isProper(Bnode* from = (Bnode*)None) {
			nulrecurs(from, Root(), true);
			if ((from->left == nullptr) ^ (from->next == nullptr)) return false;
			else if (from->left || from->next) return isProper(from->left) && isProper(from->next);
			else return true;
		}
		//
		bool isFull() {
			return stduint(exp2(double(Depth()))) == Count() + 1;
		}
		//
		bool isComplete(Bnode* from = (Bnode*)None);
	};
	//{TIPS} You can also use loop but recursion to do.
}

#endif
