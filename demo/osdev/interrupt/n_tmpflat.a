%define video_cols 80
%define video_rows 25
%define vbase 0x800B8000
%imacro FlatPrintCursor 0; in(esi:str)base(video.a)
	PUSHAD
	;::GetCursor
		XOR AH,AH
		MOV DX,0X3D4
		MOV AL,0X0E
		OUT DX,AL
		INC DX
		IN AL,DX
		MOV AH,AL
		DEC DX
		MOV AL,0X0F
		OUT DX,AL
		INC DX
		IN AL,DX
	XOR EBX,EBX
	MOV BX,AX; BX=CURSOR
	MOV EDI,ESI
	XOR ECX,ECX
	%%PX_LOOP:
		MOV AL,[EDI]
		INC EDI
		CMP AL,0
		JZ %%PX_SPECIAL_END
		CMP AL,0X0D
		JZ %%PX_SPECIAL_D
		CMP AL,0X0A
		JZ %%PX_SPECIAL_A
		INC ECX
		JMP %%PX_LOOP
	%%F_PRINTSTR:
		POP EDX
		PUSH EDX
		;::PrintString ESI,%2(AH),ECX,~(CURSOR EBX)
			PUSH EAX
			PUSH ECX
			PUSH EDX
			PUSH ESI
			PUSH EDI

			MOV EDX,EBX
			ADD EDX,ECX
			CMP EDX,video_cols*video_rows
			JAE %%case23
			SHL EBX,1
			MOV AH,0X07; WHITE ON BLACK
			%%LOOP1:
				MOV AL,[ESI]
				MOV WORD[vbase+EBX],AX; WRITE PROP
				ADD EBX,2
				INC ESI
				LOOP %%LOOP1
			SHR EBX,1
			JMP %%RETURN
			%%case23:
			MOV EDX,ECX
			SUB EDX,video_cols*video_rows-1
			JB %%CASE3
			XOR EBX,EBX
			MOV ECX,video_cols*video_rows-1
			ADD ESI,EDX
			MOV AH,0X07
			%%LOOP2:
				MOV AL,BYTE[ESI]
				MOV WORD[vbase+EBX],AX; WRITE PROP
				INC ESI
				ADD EBX,2
				LOOP %%LOOP2
			SHR EBX,1
			JMP %%RETURN
			%%CASE3:
			PUSH ECX
			MOV EDX,video_cols*video_rows-1
			ADD EBX,ECX
			SUB EBX,EDX; FROM
			SHL EBX,1
			SUB EDX,ECX; LOOP3 TIMES
			MOV ECX,EDX
			XOR EDI,EDI; TO
			PUSH AX
			%%LOOP3:
				MOV AX,[vbase+EBX]
				MOV WORD[vbase+EDI],AX
				ADD EBX,2
				ADD EDI,2
				LOOP %%LOOP3
			POP AX
			POP ECX
			MOV EBX,EDI
			MOV AH,0X07
			%%LOOP4:
				MOV AL,[ESI]
				MOV WORD[vbase+EBX],AX
				INC ESI
				ADD EBX,2
				LOOP %%LOOP4
			SHR EBX,1
			JMP %%RETURN
			%%RETURN:
			;::SetCursor BX
				MOV AX,BX
				MOV DX,0X3D4
				MOV AL,0X0E
				OUT DX,AL
				INC DX
				MOV AL,BH
				OUT DX,AL
				DEC DX
				MOV AL,0X0F
				OUT DX,AL
				INC DX
				MOV AL,BL
				OUT DX,AL
			POP EDI
			POP ESI
			POP EDX
			POP ECX
			POP EAX
		ADD ESI,ECX
		MOV ECX,0
		RET
	%%PX_SPECIAL_D:; keep SI,CX,DI,BX
		OR ECX,ECX
		JZ %%PX_NEXT_SPECIAL_D
		CALL %%F_PRINTSTR
		%%PX_NEXT_SPECIAL_D:
		INC ESI
		PUSH ECX
		PUSH AX
		MOV AX,BX
		MOV CL,video_cols
		DIV CL
		MUL CL
		MOV BX,AX
		;::SetCursor BX
			MOV AX,BX
			MOV DX,0X3D4
			MOV AL,0X0E
			OUT DX,AL
			INC DX
			MOV AL,BH
			OUT DX,AL
			DEC DX
			MOV AL,0X0F
			OUT DX,AL
			INC DX
			MOV AL,BL
			OUT DX,AL
		POP AX
		POP ECX
		JMP %%PX_LOOP
	%%PX_SPECIAL_A:
		OR ECX,ECX
		JZ %%PX_NEXT_SPECIAL_A
		CALL %%F_PRINTSTR
		%%PX_NEXT_SPECIAL_A:
			INC ESI
			CMP BX,video_cols*(video_rows-1)
			JAE %%PX_RollLF
			ADD BX,video_cols
			;::SetCursor BX
				MOV AX,BX
				MOV DX,0X3D4
				MOV AL,0X0E
				OUT DX,AL
				INC DX
				MOV AL,BH
				OUT DX,AL
				DEC DX
				MOV AL,0X0F
				OUT DX,AL
				INC DX
				MOV AL,BL
				OUT DX,AL
			JMP %%PX_LOOP
		%%PX_RollLF:
			PUSHAD
			CALL %%PX_F_RollLine
			POPAD
			JMP %%PX_LOOP
	%%PX_F_RollLine:
		MOV EAX,video_cols
		MOV ESI,EAX
		SHL ESI,1
		XOR EDI,EDI
		XOR ECX,ECX
		MOV ECX,video_cols*video_rows
		SUB ECX,EAX
		%%PX_F_RollLine_loop0:
		MOV AX,WORD[vbase+ESI]
		MOV WORD[vbase+EDI],AX
		ADD ESI,2
		ADD EDI,2
		LOOP %%PX_F_RollLine_loop0
		MOV ECX,video_cols
		%%PX_F_RollLine_loop:
		MOV WORD[vbase+EDI],0x0720
		ADD EDI,2
		LOOP %%PX_F_RollLine_loop
		RET
	%%PX_SPECIAL_END:
		OR ECX,ECX
		JZ %%ENDO
		CALL %%F_PRINTSTR
		JMP %%ENDO
	%%ENDO:
	POPAD
%endmacro

%imacro FlatReadOneSecLBA28 0; in(eax:logisec) ret(ebx+=512); no critial change.
	PUSH EAX
	PUSH ECX
	PUSH EDX
	AND ECX,0x0000_00FF
	MOV CL,1
	PUSH CX
	PUSH EAX
	MOV DX,0X1F2
	MOV AL,CL; numof sector to read
	OUT DX,AL
	INC DX; 0x1F3
	POP EAX; LBA 7~0
	OUT DX,AL
	INC DX
	MOV CL,8
	SHR EAX,CL; LBA 15~8
	OUT DX,AL
	INC DX
	SHR EAX,CL; LBA 23~16
	OUT DX,AL
	INC DX
	SHR EAX,CL
	OR AL,0XE0
	OUT DX,AL
	INC DX
	MOV AL,0X20 ; 0x20 read signal
	OUT DX,AL
	%%waitload:
	IN AL,DX
	AND AL,0X88 
	CMP AL,0X08
	JNZ %%waitload
	XOR ECX,ECX; FOR HIGH BIT
	POP CX
	SHL ECX,8; *=512/2
	MOV DX,0X1F0 ; 0x1F0 data port
	%%load:
	IN AX,DX
	MOV [EBX],AX
	ADD EBX,2
	LOOP %%load
	POP EDX
	POP ECX
	POP EAX
%endmacro

%imacro FlatDbgEcho32 0; in(ebx:obj)(esi:CurPosi)
	PUSHAD
	MOV ECX,8
	MOV EDX,0XF000_0000
	%%loop:
		PUSH ECX
		SUB ECX,1
		;CL *= 4 to SHL MASK-DX
		SHL ECX,2
		MOV EAX,EBX
		AND EAX,EDX
		SHR EAX,CL
		;ADAPT TO ASCII
		CMP AL,9
		JBE %%NextStep
		ADD AL,7
		%%NextStep:
		ADD AL,0X30
		MOV BYTE[ESI],AL
		INC ESI
		SHR EDX,4
		POP ECX
		LOOP %%loop
	POPAD
%endmacro

;{TEMP}
%imacro GIH 0
	MOV AL,0x20; EOI
	OUT 0xA0,AL; SLAVE
	OUT 0x20,AL; MASTER
%endmacro


