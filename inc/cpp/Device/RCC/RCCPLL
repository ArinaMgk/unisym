// ASCII CPP TAB4 CRLF
// Docutitle: Phase-Locked Loop in Reset and Clock Control
// Datecheck: 20240419 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_PLL_X
#define _INC_DEVICE_RCC_PLL_X

#include "../../alice"
#include "../../reference"
#include "RCCAddress"

#ifdef _MCU_STM32F103VE

namespace uni {
	namespace PLLSource {
		enum RCCPLLClockSource {
			HSI_div2 = 0x00000000, // 0b0000
			HSE      = 0x00010000, // 0b0100 RCC_CFGR_PLLSRC
			Unknown,
			Mask     = HSE
		};
	}
	class RCCPLL {
	private:
		void setSource(PLLSource::RCCPLLClockSource source) {
			Reference Cfgreg(_RCC_CFGR);
			Cfgreg &= ~(uint32)PLLSource::Mask;
			Cfgreg |= (uint32)source;
		}
		void enAble(bool ena = true) {
			Reference Conreg(_RCC_CR);
			ena ? Conreg.setof(_RCC_CR_POSI_PLLEnable) : Conreg.rstof(_RCC_CR_POSI_PLLEnable);
			while (Conreg.bitof(_RCC_CR_POSI_PLLReady) ^ ena); // wait for PLL locked
		}
	public:
		bool setMode(bool state_on = true, PLLSource::RCCPLLClockSource source = PLLSource::HSE, uint32 mulfactor = 9) {
			//{TOCHK} Can this be used twice or more ?
			if (RCCSystemClock::CurrentSource() == SysclkSource::PLL) {
				return false;//{TEMP}
			}
			else {
				Reference Conreg(_RCC_CR);
				Reference Cfgreg(_RCC_CFGR);
				if (state_on) {
					//{TODO} use Tick to process
					enAble(false);
					//{TODO} HSE call this to set divr
					// - prediv can be written only when the PLL is disabled.
					// - {TEMP} div-one
					if (source == PLLSource::HSE) {
						//{TODO} RCC_CFGR2_PREDIV1SRC
						const uint32 pred = 1;//{TEMP}
						if (pred < 2) {
							if (pred) Cfgreg.setof(_RCC_CFGR_POSI_PLL_XTPRE);
							else Cfgreg.rstof(_RCC_CFGR_POSI_PLL_XTPRE);
						}
						// Configure the main PLL clock source
						setSource(source);
						// Configure the main PLL multiplication factors
						if (mulfactor <= 9) {
							mulfactor -= 2;
							Cfgreg &= ~(uint32)(0xF << _RCC_CR_POSI_PLLMUL_LSB);
							Cfgreg |= (uint32)(mulfactor << _RCC_CR_POSI_PLLMUL_LSB);
						}
						// Enable the main PLL
						enAble();
					}
				}
				else {
					enAble(false);
				}
				return true;
			}
		}

		// 
		static bool isReady() {
			Reference Conreg(_RCC_CR);
			return Conreg.bitof(_RCC_CR_POSI_PLLReady);
		}

		static PLLSource::RCCPLLClockSource CurrentSource() {
			Reference _RCC_ConfigRegister(_RCC_CFGR);
			return (PLLSource::RCCPLLClockSource)(_RCC_ConfigRegister & _RCC_CFGR_MASK_PLLSource);
		}
	};
}

#endif
#endif
