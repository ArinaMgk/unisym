// ASCII CPP TAB4 CRLF
// Docutitle: Reset and Clock Control
// Datecheck: 20240416 ~ <Last-check>
// Developer: @dosconio
// Attribute: <ArnCovenant> <Environment> <Platform>
// Reference: <Reference>
// Dependens: <Dependence>
// Copyright: UNISYM, under Apache License 2.0
/*
	Copyright 2023 ArinaMgk

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0
	http://unisym.org/license.html

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

#ifndef _INC_DEVICE_RCC_X
#define _INC_DEVICE_RCC_X

#include "../../unisym"
#include "../../reference"

#include "RCCAddress"
#include "RCCClock"
#include "RCCOscillator"
#include "RCCPrescaler"
#include "RCCPLL"

#ifdef _MCU_STM32F10x

// !!! All unchecked

/* Compatible for RCC of HAL */
/*
stm32f1xx_hal_rcc.c
[ ]#define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
[ ]#define MCO1_GPIO_PORT        GPIOA
[ ]#define MCO1_PIN              GPIO_PIN_8
[ ]static void RCC_Delay(uint32_t mdelay);
[ ]HAL_StatusTypeDef HAL_RCC_DeInit(void)
[*]HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
   - TODO HSI
   - TODO LSI
   - TODO LSE
[*]HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
[ ]void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
[ ]void HAL_RCC_EnableCSS(void)
[ ]void HAL_RCC_DisableCSS(void)
[ ]uint32_t HAL_RCC_GetSysClockFreq(void)
[ ]uint32_t HAL_RCC_GetHCLKFreq(void)
[ ]uint32_t HAL_RCC_GetPCLK1Freq(void)
[ ]uint32_t HAL_RCC_GetPCLK2Freq(void)
[ ]void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
[ ]void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
[ ]void HAL_RCC_NMI_IRQHandler(void)
[ ]static void RCC_Delay(uint32_t mdelay)
[ ]__weak void HAL_RCC_CSSCallback(void)

stm32f1xx_hal_rcc.h
...

stm32f1xx_hal_rcc_ex.c
[v]HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
...

stm32f1xx_hal_rcc_ex.h
[v]typedef struct ... RCC_OscInitTypeDef;
[ ]define __HAL_RCC_HSE_CONFIG(__STATE__)
...
*/

namespace uni {
	// use namespace to be comopatible with old C++ compilers
	namespace FlashLatency {
		enum FlashLatency {
			LATENCY_0 = 0,
			LATENCY_1 = 1,
			LATENCY_2 = 2
		};
	}
	class RCC_t {
	protected:
		//{TODO} Reference Conreg(_RCC_CR); Reference Cfgreg(_RCC_CFGR); ...
		//{TEMP} Position Flash here:
		FlashLatency::FlashLatency getLatency() {
			Reference _FLASH_ACReg(0x40022000);
			return (FlashLatency::FlashLatency)(_FLASH_ACReg & 0x7);
		}
		void setLatency(FlashLatency::FlashLatency FLatency) {
			Reference _FLASH_ACReg(0x40022000);
			_FLASH_ACReg = (_FLASH_ACReg & ~(0x7)) | FLatency;
		}

	public:
		RCCOscillatorHSE HSE;
		RCCOscillatorHSI HSI;
		RCCOscillatorLSE LSE;
		RCCOscillatorLSI LSI;
		RCCPLL PLL;
		RCCSystemClock Sysclock;
		RCCAHB AHB;
		RCCAPB APB1, APB2;
		//
		Reference Cfgreg;
		//
		RCC_t() : APB1(1), APB2(2), Cfgreg(_RCC_CFGR) {
			
		}
		//
		bool setFlash(bool decrease = false, FlashLatency::FlashLatency FLatency = FlashLatency::LATENCY_2) { // param in order of using frequence, under C++ rules
			//{TODO} HAL-macro FLASH_ACR_LATENCY
			// "Increasing the number of wait states because of higher CPU frequency"
			// "Decreasing the number of wait states because of lower CPU frequency"
			if (FLatency == getLatency()) return true;
			if ((FLatency > getLatency()) ^ decrease) // (>)^fasle=origin(>)
				setLatency(FLatency);
			return FLatency == getLatency();
		}
	};

	//
	extern RCC_t RCC;
}

#elif defined(_MCU_STM32F4x)

namespace uni {

	extern uint32_t SystemCoreClock;
	extern const uint8_t AHBPrescTable[16];
	extern const uint8_t APBPrescTable[8];
	
	namespace RCCReg {
		typedef enum {
			CR = 0, PLLCFGR, CFGR, CIR,
			AHB1RSTR, AHB2RSTR, AHB3RSTR, REV00,
			APB1RSTR, APB2RSTR, REV01, REV02,
			AHB1ENR, AHB2ENR, AHB3ENR, REV03,
			APB1ENR, APB2ENR, REV04, REV05,
			AHB1LPENR, AHB2LPENR, AHB3LPENR, REV06,
			APB1LPENR, APB2LPENR, REV07, REV08,
			BDCR, CSR, REV09, REV10,
			SSCGR, PLLI2SCFGR
		} RCCReg;
	}

	class RCC_t {
	protected:
		_TEMP byte getLatency() {
			Reference _FLASH_ACReg(0x40023C00);
			return (_FLASH_ACReg & 0x7);
		}
		_TEMP void setLatency(byte FLatency) {
			FLatency &= 0x7;
			Reference _FLASH_ACReg(0x40023C00);
			_FLASH_ACReg = (_FLASH_ACReg & ~(0x7)) | FLatency;
		}
	public:
		RCCOscillatorHSE HSE;
		// RCCOscillatorHSI HSI;
		// RCCOscillatorLSE LSE;
		// RCCOscillatorLSI LSI;
		RCCPLL PLL;
		RCCSystemClock Sysclock;
		RCCAHB AHB;
		RCCAPB APB1, APB2;
		inline Reference operator[](RCCReg::RCCReg idx) { return Reference(/*baseaddr*/0x40023800 + (((stduint)idx) << 2)); }
		RCC_t() : APB1(1), APB2(2) {}
		_TEMP bool setFlash(bool decrease = false) {
			stduint FLatency = _TEMP 5;// FLASH_LATENCY_5
			if ((FLatency > getLatency()) ^ decrease) // `=`need-not-consider
				setLatency(FLatency);
			return FLatency == getLatency();
		}
		bool setClock(SysclkSource::RCCSysclockSource source);
	};

	extern RCC_t RCC;
}

#endif
#endif
